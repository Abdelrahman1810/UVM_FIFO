Coverage Report by instance with details

=================================================================================
=== Instance: /top/intf
=== Design Unit: work.FIFO_interface
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        132       132         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/intf --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       almostempty           1           1      100.00 
                                   almostempty_ref           1           1      100.00 
                                        almostfull           1           1      100.00 
                                    almostfull_ref           1           1      100.00 
                                               clk           1           1      100.00 
                                     data_in[15-0]           1           1      100.00 
                                    data_out[15-0]           1           1      100.00 
                                data_out_ref[15-0]           1           1      100.00 
                                             empty           1           1      100.00 
                                         empty_ref           1           1      100.00 
                                              full           1           1      100.00 
                                          full_ref           1           1      100.00 
                                          overflow           1           1      100.00 
                                      overflow_ref           1           1      100.00 
                                             rd_en           1           1      100.00 
                                             rst_n           1           1      100.00 
                                         underflow           1           1      100.00 
                                     underflow_ref           1           1      100.00 
                                            wr_ack           1           1      100.00 
                                        wr_ack_ref           1           1      100.00 
                                             wr_en           1           1      100.00 

Total Node Count     =         66 
Toggled Node Count   =         66 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (132 of 132 bins)

=================================================================================
=== Instance: /top/DUT/FIFO_sva_inst
=== Design Unit: work.FIFO_sva
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         4         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT/FIFO_sva_inst

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File DUT/assertion.sv
------------------------------------IF Branch------------------------------------
    17                                     23675     Count coming in to IF
    17              1                        613       if (!rst_n) begin
                                           23062     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    68                                     23675     Count coming in to IF
    68              1                        613       if (!rst_n) begin
                                           23062     All False Count
Branch totals: 2 hits of 2 branches = 100.00%



Directive Coverage:
    Directives                      28        28         0   100.00%

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_wr_akc_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(69)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_overflow_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(70)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_underflow_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(71)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_data_out_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(72)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_full_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(75)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_almostfull_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(76)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_empty_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(77)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_almostempty_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(78)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/full_from_almost_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(84)
                                                                              2558 Covered   
/top/DUT/FIFO_sva_inst/full_noChange_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(85)
                                                                              6787 Covered   
/top/DUT/FIFO_sva_inst/full_inactive_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(86)
                                                                              2556 Covered   
/top/DUT/FIFO_sva_inst/ack_active_cover  FIFO_sva Verilog  SVA  DUT/assertion.sv(89)
                                                                              12431 Covered   
/top/DUT/FIFO_sva_inst/ack_inactive_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(90)
                                                                              8393 Covered   
/top/DUT/FIFO_sva_inst/almostfull_from_full_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(93)
                                                                              2556 Covered   
/top/DUT/FIFO_sva_inst/almostfull_noChange_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(94)
                                                                              6787 Covered   
/top/DUT/FIFO_sva_inst/almostfull_inactive_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(95)
                                                                               288 Covered   
/top/DUT/FIFO_sva_inst/overflow_active_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(98)
                                                                              8393 Covered   
/top/DUT/FIFO_sva_inst/overflow_wr_in_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(99)
                                                                               818 Covered   
/top/DUT/FIFO_sva_inst/overflow_Nfull_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(100)
                                                                               942 Covered   
/top/DUT/FIFO_sva_inst/almostempty_noChange_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(103)
                                                                              6787 Covered   
/top/DUT/FIFO_sva_inst/almostempty_from_empty_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(104)
                                                                              1391 Covered   
/top/DUT/FIFO_sva_inst/almostempty_inactive_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(105)
                                                                               526 Covered   
/top/DUT/FIFO_sva_inst/empty_noChaneg_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(108)
                                                                              6787 Covered   
/top/DUT/FIFO_sva_inst/empty_from_almost_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(109)
                                                                              1216 Covered   
/top/DUT/FIFO_sva_inst/empty_inactive_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(110)
                                                                              1391 Covered   
/top/DUT/FIFO_sva_inst/underflow_active_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(113)
                                                                              9033 Covered   
/top/DUT/FIFO_sva_inst/underflow_Nempty_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(114)
                                                                              1133 Covered   
/top/DUT/FIFO_sva_inst/underflow_Nrd_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(115)
                                                                               939 Covered   
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT/FIFO_sva_inst --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File DUT/assertion.sv
    4                                                module FIFO_sva(data_in, wr_en, rd_en, clk, rst_n, full, empty, almostfull, almostempty, wr_ack, overflow, underflow, data_out);
    5                                                
    6                                                input [FIFO_WIDTH-1:0] data_in;
    7                                                input clk, rst_n, wr_en, rd_en;
    8                                                input [FIFO_WIDTH-1:0] data_out;
    9                                                input wr_ack, overflow;
    10                                               input full, empty, almostfull, almostempty, underflow;
    11                                               
    12                                               `ifdef LOOK_ASSERTION
    13                                               /////////////////////////////
    14                                               //        Assertion        //
    15                                               /////////////////////////////
    16              1                      23675     always_comb begin : rst_n_assert
    17                                                 if (!rst_n) begin
    18                                                   assert_wr_akc_rst:    `asrt_fn(wr_ack == 0);
    19                                                   assert_overflow_rst:  `asrt_fn(overflow == 0);
    20                                                   assert_underflow_rst: `asrt_fn(underflow == 0);
    21                                                   assert_data_out_rst:  `asrt_fn(data_out == 0);
    22                                                   assert_full_rst:        `asrt_fn(full == 0);
    23                                                   assert_almostfull_rst:  `asrt_fn(almostfull == 0);
    24                                                   assert_empty_rst:       `asrt_fn(empty == 0);
    25                                                   assert_almostempty_rst: `asrt_fn(almostempty == 0);
    26                                                 end
    27                                               end
    28                                               
    29                                               // Global signal assertion
    30                                               // full
    31                                               full_from_almost: `asrt_prp(AA_I(almostfull,wr_en,rd_en) |=> full);
    32                                               full_noChange:	  `asrt_prp( `same_seq |=> $past(full) == full);
    33                                               full_inactive:	  `asrt_prp(A_A(full,rd_en) |=> !full);
    34                                               
    35                                               // wr_ack
    36                                               ack_active:   `asrt_prp(A_I(wr_en,full) |=> wr_ack);
    37                                               ack_inactive: `asrt_prp( full |=> !wr_ack);
    38                                               
    39                                               // almostfull
    40                                               almostfull_from_full: `asrt_prp(A_A(full,rd_en)  |=> ($fell(full) && $rose(almostfull)));
    41                                               almostfull_noChange:  `asrt_prp( `same_seq |=> $past(almostfull) == almostfull);
    42                                               almostfull_inactive:  `asrt_prp(AA_I(almostfull,rd_en,wr_en) |=> !almostfull );
    43                                               
    44                                               // overflow
    45                                               overflow_active:`asrt_prp(A_A(full,wr_en) |=> overflow);
    46                                               overflow_wr_in: `asrt_prp(($past(overflow) && !wr_en) |=> !overflow);
    47                                               overflow_Nfull: `asrt_prp(($past(overflow) && !full)  |=> !overflow);
    48                                               
    49                                               // almostempty
    50                                               almostempty_noChange:  `asrt_prp( `same_seq |=> ($past(almostempty) == almostempty));
    51                                               almostempty_from_empty:`asrt_prp(A_A(empty,wr_en) |=> ($fell(empty) && $rose(almostempty)));
    52                                               almostempty_inactive:  `asrt_prp(AA_I(almostempty,wr_en,rd_en) |=> !almostempty );
    53                                               
    54                                               // empty
    55                                               empty_noChaneg:    `asrt_prp( `same_seq |=> ($past(empty) == empty) );
    56                                               empty_from_almost: `asrt_prp(AA_I(almostempty,rd_en,wr_en) |=> empty);
    57                                               empty_inactive:    `asrt_prp(A_A(empty,wr_en) |=> !empty);
    58                                               
    59                                               // underflow
    60                                               underflow_active:  `asrt_prp(A_A(empty,rd_en) |=> underflow);
    61                                               underflow_Nempty:  `asrt_prp(($past(underflow) && !empty)  |=> !underflow);
    62                                               underflow_Nrd:     `asrt_prp(($past(underflow) && !rd_en)  |=> !underflow);
    63                                               
    64                                               ////////////////////////////
    65                                               //        Coverage        //
    66                                               ////////////////////////////
    67              1                      23675     always_comb begin : rst_n_cover

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         86        86         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT/FIFO_sva_inst --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       almostempty           1           1      100.00 
                                        almostfull           1           1      100.00 
                                               clk           1           1      100.00 
                                     data_in[0-15]           1           1      100.00 
                                    data_out[0-15]           1           1      100.00 
                                             empty           1           1      100.00 
                                              full           1           1      100.00 
                                          overflow           1           1      100.00 
                                             rd_en           1           1      100.00 
                                             rst_n           1           1      100.00 
                                         underflow           1           1      100.00 
                                            wr_ack           1           1      100.00 
                                             wr_en           1           1      100.00 

Total Node Count     =         43 
Toggled Node Count   =         43 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (86 of 86 bins)

=================================================================================
=== Instance: /top/DUT
=== Design Unit: work.FIFO
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        25        25         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/DUT

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File DUT/FIFO.sv
------------------------------------IF Branch------------------------------------
    20                                     42079     Count coming in to IF
    20              1                        866     	if (!rst_n) begin
    25              1                      12552     	else if (wr_en && count < FIFO_DEPTH) begin
    31              1                      28661     	else begin 
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    33                                     28661     Count coming in to IF
    33              1                       8382     		if (full && wr_en)// FIX
    35              1                      20279     		else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    41                                     23942     Count coming in to IF
    41              1                        625     	if (!rst_n) begin
    46              1                      12121     	else if (rd_en && count != 0) begin
    51              1                      11196     	else begin // FIX
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    52                                     11196     Count coming in to IF
    52              1                       2351     		if (empty && rd_en)// FIX
    54              1                       8845     		else // FIX
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    60                                     20909     Count coming in to IF
    60              1                        625     	if (!rst_n) begin
    63              1                      20284     	else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    64                                     20284     Count coming in to IF
    64              1                        716     		if (({wr_en, rd_en} == 2'b11) && full) // FIX
    66              1                        924     		else if (({wr_en, rd_en} == 2'b11) && empty) // FIX
    68              1                       4799     		else if	( ({wr_en, rd_en} == 2'b10) && !full) 
    70              1                       4576     		else if ( ({wr_en, rd_en} == 2'b01) && !empty) 
                                            9269     All False Count
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------IF Branch------------------------------------
    75                                     11206     Count coming in to IF
    75              1                       2559     assign full = (count == FIFO_DEPTH)? 1 : 0; 
    75              2                       8647     assign full = (count == FIFO_DEPTH)? 1 : 0; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    76                                     11830     Count coming in to IF
    76              1                       1560     assign empty = (count == 0 && rst_n)? 1 : 0; // FIX
    76              2                      10270     assign empty = (count == 0 && rst_n)? 1 : 0; // FIX
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    78                                     11206     Count coming in to IF
    78              1                       2854     assign almostfull = (count == FIFO_DEPTH-1)? 1 : 0; 
    78              2                       8352     assign almostfull = (count == FIFO_DEPTH-1)? 1 : 0; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    79                                     11206     Count coming in to IF
    79              1                       1888     assign almostempty = (count == 1)? 1 : 0; 
    79              2                       9318     assign almostempty = (count == 1)? 1 : 0; 
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      25        25         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/DUT --

  File DUT/FIFO.sv
----------------Focused Condition View-------------------
Line       25 Item    1  (wr_en && (count < 8))
Condition totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
        wr_en         Y
  (count < 8)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  wr_en_0               -                             
  Row   2:          1  wr_en_1               (count < 8)                   
  Row   3:          1  (count < 8)_0         wr_en                         
  Row   4:          1  (count < 8)_1         wr_en                         

----------------Focused Condition View-------------------
Line       33 Item    1  (full && wr_en)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        full         Y
       wr_en         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  full_0                -                             
  Row   2:          1  full_1                wr_en                         
  Row   3:          1  wr_en_0               full                          
  Row   4:          1  wr_en_1               full                          

----------------Focused Condition View-------------------
Line       46 Item    1  (rd_en && (count != 0))
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
         rd_en         Y
  (count != 0)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  rd_en_0               -                             
  Row   2:          1  rd_en_1               (count != 0)                  
  Row   3:          1  (count != 0)_0        rd_en                         
  Row   4:          1  (count != 0)_1        rd_en                         

----------------Focused Condition View-------------------
Line       52 Item    1  (empty && rd_en)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       empty         Y
       rd_en         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  empty_0               -                             
  Row   2:          1  empty_1               rd_en                         
  Row   3:          1  rd_en_0               empty                         
  Row   4:          1  rd_en_1               empty                         

----------------Focused Condition View-------------------
Line       64 Item    1  ((rd_en && wr_en) && full)
Condition totals: 3 of 3 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       rd_en         Y
       wr_en         Y
        full         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  rd_en_0               -                             
  Row   2:          1  rd_en_1               (full && wr_en)               
  Row   3:          1  wr_en_0               rd_en                         
  Row   4:          1  wr_en_1               (full && rd_en)               
  Row   5:          1  full_0                (rd_en && wr_en)              
  Row   6:          1  full_1                (rd_en && wr_en)              

----------------Focused Condition View-------------------
Line       66 Item    1  ((rd_en && wr_en) && empty)
Condition totals: 3 of 3 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       rd_en         Y
       wr_en         Y
       empty         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  rd_en_0               -                             
  Row   2:          1  rd_en_1               (empty && wr_en)              
  Row   3:          1  wr_en_0               rd_en                         
  Row   4:          1  wr_en_1               (empty && rd_en)              
  Row   5:          1  empty_0               (rd_en && wr_en)              
  Row   6:          1  empty_1               (rd_en && wr_en)              

----------------Focused Condition View-------------------
Line       68 Item    1  ((~rd_en && wr_en) && ~full)
Condition totals: 3 of 3 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       rd_en         Y
       wr_en         Y
        full         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  rd_en_0               (~full && wr_en)              
  Row   2:          1  rd_en_1               -                             
  Row   3:          1  wr_en_0               ~rd_en                        
  Row   4:          1  wr_en_1               (~full && ~rd_en)             
  Row   5:          1  full_0                (~rd_en && wr_en)             
  Row   6:          1  full_1                (~rd_en && wr_en)             

----------------Focused Condition View-------------------
Line       70 Item    1  ((rd_en && ~wr_en) && ~empty)
Condition totals: 3 of 3 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       rd_en         Y
       wr_en         Y
       empty         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  rd_en_0               -                             
  Row   2:          1  rd_en_1               (~empty && ~wr_en)            
  Row   3:          1  wr_en_0               (~empty && rd_en)             
  Row   4:          1  wr_en_1               rd_en                         
  Row   5:          1  empty_0               (rd_en && ~wr_en)             
  Row   6:          1  empty_1               (rd_en && ~wr_en)             

----------------Focused Condition View-------------------
Line       75 Item    1  (count == 8)
Condition totals: 1 of 1 input term covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 8)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 8)_0        -                             
  Row   2:          1  (count == 8)_1        -                             

----------------Focused Condition View-------------------
Line       76 Item    1  ((count == 0) && rst_n)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 0)         Y
         rst_n         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 0)_0        -                             
  Row   2:          1  (count == 0)_1        rst_n                         
  Row   3:          1  rst_n_0               (count == 0)                  
  Row   4:          1  rst_n_1               (count == 0)                  

----------------Focused Condition View-------------------
Line       78 Item    1  (count == (8 - 1))
Condition totals: 1 of 1 input term covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (count == (8 - 1))         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == (8 - 1))_0  -                             
  Row   2:          1  (count == (8 - 1))_1  -                             

----------------Focused Condition View-------------------
Line       79 Item    1  (count == 1)
Condition totals: 1 of 1 input term covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 1)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 1)_0        -                             
  Row   2:          1  (count == 1)_1        -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      30        30         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/DUT --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File DUT/FIFO.sv
    3                                                module FIFO(data_in, wr_en, rd_en, clk, rst_n, full, empty, almostfull, almostempty, wr_ack, overflow, underflow, data_out);
    4                                                
    5                                                input [FIFO_WIDTH-1:0] data_in;
    6                                                input clk, rst_n, wr_en, rd_en;
    7                                                output reg [FIFO_WIDTH-1:0] data_out;
    8                                                output reg wr_ack, overflow, underflow;
    9                                                output full, empty, almostfull, almostempty;
    10                                               //clk, rst_n, wr_en, rd_en, data_in, data_out,
    11                                               //wr_ack, overflow, full, empty, almostfull, almostempty, underflow
    12                                                
    13                                               localparam max_fifo_addr = $clog2(FIFO_DEPTH);
    14                                               
    15                                               reg [FIFO_WIDTH-1:0] mem [FIFO_DEPTH-1:0];
    16                                               reg [max_fifo_addr-1:0] wr_ptr, rd_ptr;
    17                                               reg [max_fifo_addr:0] count;
    18                                               
    19              1                      42079     always @(posedge clk or negedge rst_n) begin
    20                                               	if (!rst_n) begin
    21              1                        866     		wr_ptr <= 0;
    22              1                        866     		wr_ack <= 0; // FIX
    23              1                        866     		overflow <= 0; // FIX
    24                                               	end
    25                                               	else if (wr_en && count < FIFO_DEPTH) begin
    26              1                      12552     		mem[wr_ptr] <= data_in;
    27              1                      12552     		wr_ack <= 1;
    28              1                      12552     		wr_ptr <= wr_ptr + 1;
    29              1                      12552     		overflow <= 0; // FIX
    30                                               	end
    31                                               	else begin 
    32              1                      28661     		wr_ack <= 0; 
    33                                               		if (full && wr_en)// FIX
    34              1                       8382     			overflow <= 1;
    35                                               		else
    36              1                      20279     			overflow <= 0;
    37                                               	end
    38                                               end
    39                                               
    40              1                      23942     always @(posedge clk or negedge rst_n) begin
    41                                               	if (!rst_n) begin
    42              1                        625     		rd_ptr <= 0;
    43              1                        625     		underflow <= 0;// FIX
    44              1                        625     		data_out <= 0;// FIX
    45                                               	end
    46                                               	else if (rd_en && count != 0) begin
    47              1                      12121     		data_out <= mem[rd_ptr];
    48              1                      12121     		rd_ptr <= rd_ptr + 1;
    49              1                      12121     		underflow <= 0; // FIX
    50                                               	end
    51                                               	else begin // FIX
    52                                               		if (empty && rd_en)// FIX
    53              1                       2351     			underflow <= 1;// FIX
    54                                               		else // FIX
    55              1                       8845     			underflow <= 0;// FIX
    56                                               	end // FIX
    57                                               end
    58                                               
    59              1                      20909     always @(posedge clk or negedge rst_n) begin
    60                                               	if (!rst_n) begin
    61              1                        625     		count <= 0;
    62                                               	end
    63                                               	else begin
    64                                               		if (({wr_en, rd_en} == 2'b11) && full) // FIX
    65              1                        716     			count <= count - 1; // FIX
    66                                               		else if (({wr_en, rd_en} == 2'b11) && empty) // FIX
    67              1                        924     			count <= count + 1; // FIX
    68                                               		else if	( ({wr_en, rd_en} == 2'b10) && !full) 
    69              1                       4799     			count <= count + 1; 
    70                                               		else if ( ({wr_en, rd_en} == 2'b01) && !empty) 
    71              1                       4576     			count <= count - 1; 
    72                                               	end
    73                                               end
    74                                               
    75              1                      11207     assign full = (count == FIFO_DEPTH)? 1 : 0; 
    76              1                      11831     assign empty = (count == 0 && rst_n)? 1 : 0; // FIX
    77                                               
    78              1                      11207     assign almostfull = (count == FIFO_DEPTH-1)? 1 : 0; 
    79              1                      11207     assign almostempty = (count == 1)? 1 : 0; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        106       106         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/DUT --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       almostempty           1           1      100.00 
                                        almostfull           1           1      100.00 
                                               clk           1           1      100.00 
                                        count[3-0]           1           1      100.00 
                                     data_in[0-15]           1           1      100.00 
                                    data_out[15-0]           1           1      100.00 
                                             empty           1           1      100.00 
                                              full           1           1      100.00 
                                          overflow           1           1      100.00 
                                             rd_en           1           1      100.00 
                                       rd_ptr[2-0]           1           1      100.00 
                                             rst_n           1           1      100.00 
                                         underflow           1           1      100.00 
                                            wr_ack           1           1      100.00 
                                             wr_en           1           1      100.00 
                                       wr_ptr[2-0]           1           1      100.00 

Total Node Count     =         53 
Toggled Node Count   =         53 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (106 of 106 bins)

=================================================================================
=== Instance: /top/GLD
=== Design Unit: work.FIFO_ref
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        18        18         0   100.00%

================================Branch Details================================

Branch Coverage for instance /top/GLD

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File refrence/FIFO_ref.sv
------------------------------------IF Branch------------------------------------
    13                                     42120     Count coming in to IF
    13              1                        873             if (!rst_n) begin
    18              1                      12552             else if (wr_en && !full) begin
    23              1                      28695             else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    25                                     28695     Count coming in to IF
    25              1                       8394                 if (full && wr_en)
    27              1                      20301                 else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    34                                     42120     Count coming in to IF
    34              1                        873             if (!rst_n) begin
    39              1                      12121             else if (rd_en && !empty) begin
    43              1                      29126             else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    44                                     29126     Count coming in to IF
    44              1                       9120                 if (empty && rd_en)
    46              1                      20006                 else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    51                                     18659     Count coming in to IF
    51              1                       6712         assign almostfull = (fifoo_q.size() == FIFO_DEPTH-1 && rst_n)? 1:0;
    51              2                      11947         assign almostfull = (fifoo_q.size() == FIFO_DEPTH-1 && rst_n)? 1:0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    52                                     18659     Count coming in to IF
    52              1                       2559         assign full = (fifoo_q.size() >= FIFO_DEPTH && rst_n)? 1:0;
    52              2                      16100         assign full = (fifoo_q.size() >= FIFO_DEPTH && rst_n)? 1:0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    54                                     18658     Count coming in to IF
    54              1                       1560         assign empty = (fifoo_q.size() == 0 && rst_n)? 1:0;
    54              2                      17098         assign empty = (fifoo_q.size() == 0 && rst_n)? 1:0;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    55                                     18659     Count coming in to IF
    55              1                       4108         assign almostempty = (fifoo_q.size() == 1 && rst_n)? 1:0;
    55              2                      14551         assign almostempty = (fifoo_q.size() == 1 && rst_n)? 1:0;
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      16        16         0   100.00%

================================Condition Details================================

Condition Coverage for instance /top/GLD --

  File refrence/FIFO_ref.sv
----------------Focused Condition View-------------------
Line       18 Item    1  (wr_en && ~full)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       wr_en         Y
        full         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  wr_en_0               -                             
  Row   2:          1  wr_en_1               ~full                         
  Row   3:          1  full_0                wr_en                         
  Row   4:          1  full_1                wr_en                         

----------------Focused Condition View-------------------
Line       25 Item    1  (full && wr_en)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        full         Y
       wr_en         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  full_0                -                             
  Row   2:          1  full_1                wr_en                         
  Row   3:          1  wr_en_0               full                          
  Row   4:          1  wr_en_1               full                          

----------------Focused Condition View-------------------
Line       39 Item    1  (rd_en && ~empty)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       rd_en         Y
       empty         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  rd_en_0               -                             
  Row   2:          1  rd_en_1               ~empty                        
  Row   3:          1  empty_0               rd_en                         
  Row   4:          1  empty_1               rd_en                         

----------------Focused Condition View-------------------
Line       44 Item    1  (empty && rd_en)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
       empty         Y
       rd_en         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  empty_0               -                             
  Row   2:          1  empty_1               rd_en                         
  Row   3:          1  rd_en_0               empty                         
  Row   4:          1  rd_en_1               empty                         

----------------Focused Condition View-------------------
Line       51 Item    1  ((size(fifoo_q) == (8 - 1)) && rst_n)
Condition totals: 2 of 2 input terms covered = 100.00%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
  (size(fifoo_q) == (8 - 1))         Y
                       rst_n         Y

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (size(fifoo_q) == (8 - 1))_0  -                             
  Row   2:          1  (size(fifoo_q) == (8 - 1))_1  rst_n                         
  Row   3:          1  rst_n_0                       (size(fifoo_q) == (8 - 1))    
  Row   4:          1  rst_n_1                       (size(fifoo_q) == (8 - 1))    

----------------Focused Condition View-------------------
Line       52 Item    1  ((size(fifoo_q) >= 8) && rst_n)
Condition totals: 2 of 2 input terms covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (size(fifoo_q) >= 8)         Y
                 rst_n         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (size(fifoo_q) >= 8)_0  -                             
  Row   2:          1  (size(fifoo_q) >= 8)_1  rst_n                         
  Row   3:          1  rst_n_0                 (size(fifoo_q) >= 8)          
  Row   4:          1  rst_n_1                 (size(fifoo_q) >= 8)          

----------------Focused Condition View-------------------
Line       54 Item    1  ((size(fifoo_q) == 0) && rst_n)
Condition totals: 2 of 2 input terms covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (size(fifoo_q) == 0)         Y
                 rst_n         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (size(fifoo_q) == 0)_0  -                             
  Row   2:          1  (size(fifoo_q) == 0)_1  rst_n                         
  Row   3:          1  rst_n_0                 (size(fifoo_q) == 0)          
  Row   4:          1  rst_n_1                 (size(fifoo_q) == 0)          

----------------Focused Condition View-------------------
Line       55 Item    1  ((size(fifoo_q) == 1) && rst_n)
Condition totals: 2 of 2 input terms covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (size(fifoo_q) == 1)         Y
                 rst_n         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (size(fifoo_q) == 1)_0  -                             
  Row   2:          1  (size(fifoo_q) == 1)_1  rst_n                         
  Row   3:          1  rst_n_0                 (size(fifoo_q) == 1)          
  Row   4:          1  rst_n_1                 (size(fifoo_q) == 1)          


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      22        22         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top/GLD --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File refrence/FIFO_ref.sv
    2                                                module FIFO_ref(data_in, wr_en, rd_en, clk, rst_n, full, empty, almostfull, almostempty, wr_ack, overflow, underflow, data_out);
    3                                                    input [FIFO_WIDTH-1:0] data_in;
    4                                                    input clk, rst_n, wr_en, rd_en;
    5                                                    output reg [FIFO_WIDTH-1:0] data_out;
    6                                                    output reg wr_ack, overflow, underflow;
    7                                                    output full, empty, almostfull, almostempty;
    8                                                
    9                                                    reg [FIFO_WIDTH-1:0] fifoo_q [$];
    10                                                   
    11                                                   // Write
    12              1                      42120         always @(posedge clk or negedge rst_n) begin
    13                                                       if (!rst_n) begin
    14              1                        873                 fifoo_q.delete();
    15              1                        873                 wr_ack <= 0;
    16              1                        873                 overflow <= 0;
    17                                                       end
    18                                                       else if (wr_en && !full) begin
    19              1                      12552                 fifoo_q.push_back(data_in);
    20              1                      12552                 wr_ack <= 1;
    21              1                      12552                 overflow <= 0;
    22                                                       end
    23                                                       else begin
    24              1                      28695                 wr_ack <= 0;
    25                                                           if (full && wr_en)
    26              1                       8394                     overflow <= 1;
    27                                                           else
    28              1                      20301                     overflow <= 0;
    29                                                       end
    30                                                   end
    31                                               
    32                                                   // Read
    33              1                      42120         always @(posedge clk or negedge rst_n) begin
    34                                                       if (!rst_n) begin
    35              1                        873                 fifoo_q.delete();
    36              1                        873                 underflow <= 0;
    37              1                        873                 data_out <= 0;
    38                                                       end
    39                                                       else if (rd_en && !empty) begin
    40              1                      12121                 data_out <= fifoo_q.pop_front();
    41              1                      12121                 underflow <= 0;
    42                                                       end
    43                                                       else begin
    44                                                           if (empty && rd_en)
    45              1                       9120                     underflow <= 1;
    46                                                           else 
    47              1                      20006                     underflow <= 0;
    48                                                       end
    49                                                   end
    50                                               
    51              1                      18659         assign almostfull = (fifoo_q.size() == FIFO_DEPTH-1 && rst_n)? 1:0;
    52              1                      18659         assign full = (fifoo_q.size() >= FIFO_DEPTH && rst_n)? 1:0;
    53                                               
    54              1                      18659         assign empty = (fifoo_q.size() == 0 && rst_n)? 1:0;
    55              1                      18659         assign almostempty = (fifoo_q.size() == 1 && rst_n)? 1:0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         86        86         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top/GLD --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       almostempty           1           1      100.00 
                                        almostfull           1           1      100.00 
                                               clk           1           1      100.00 
                                     data_in[0-15]           1           1      100.00 
                                    data_out[15-0]           1           1      100.00 
                                             empty           1           1      100.00 
                                              full           1           1      100.00 
                                          overflow           1           1      100.00 
                                             rd_en           1           1      100.00 
                                             rst_n           1           1      100.00 
                                         underflow           1           1      100.00 
                                            wr_ack           1           1      100.00 
                                             wr_en           1           1      100.00 

Total Node Count     =         43 
Toggled Node Count   =         43 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (86 of 86 bins)

=================================================================================
=== Instance: /top
=== Design Unit: work.top
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       5         5         0   100.00%

================================Statement Details================================

Statement Coverage for instance /top --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/top.sv
    5                                                module top ();
    6                                                    bit clk;
    7                                                
    8                                                    initial begin
    9               1                          1             forever #1 clk = ~clk;
    9               2                      83617     
    9               3                      83616     
    10                                                   end
    11                                               
    12                                                   FIFO_interface intf (clk);
    13                                                   FIFO DUT (
    14                                                       intf.data_in, intf.wr_en, intf.rd_en, clk, intf.rst_n,
    15                                                       
    16                                                       intf.full, intf.empty, intf.almostfull, intf.almostempty,
    17                                                       intf.wr_ack, intf.overflow, intf.underflow, intf.data_out
    18                                                   );    
    19                                               
    20                                                   FIFO_ref GLD (
    21                                                       intf.data_in, intf.wr_en, intf.rd_en, clk, intf.rst_n,
    22                                                       
    23                                                       intf.full_ref, intf.empty_ref, intf.almostfull_ref, intf.almostempty_ref,
    24                                                       intf.wr_ack_ref, intf.overflow_ref, intf.underflow_ref, intf.data_out_ref
    25                                                   );
    26                                               
    27                                                   bind FIFO FIFO_sva FIFO_sva_inst(
    28                                                       intf.data_in, intf.wr_en, intf.rd_en, clk, intf.rst_n,
    29                                                       
    30                                                       intf.full, intf.empty, intf.almostfull, intf.almostempty,
    31                                                       intf.wr_ack, intf.overflow, intf.underflow, intf.data_out
    32                                                   );
    33                                               
    34                                                   initial begin
    35              1                          1             uvm_config_db#(virtual FIFO_interface)::set(null, "uvm_test_top", "INTERFACE", intf);
    36              1                          1             run_test("FIFO_test");

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          2         2         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /top --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           1           1      100.00 

Total Node Count     =          1 
Toggled Node Count   =          1 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (2 of 2 bins)

=================================================================================
=== Instance: /sequenceItem_pkg
=== Design Unit: work.sequenceItem_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /sequenceItem_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/sequence_Item/sequenceItem.sv
------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               1                    ***0***         `uvm_object_utils(FIFO_sequenceItem) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               2                    ***0***         `uvm_object_utils(FIFO_sequenceItem) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               3                    ***0***         `uvm_object_utils(FIFO_sequenceItem) 
    9               4                    ***0***         `uvm_object_utils(FIFO_sequenceItem) 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               5                    ***0***         `uvm_object_utils(FIFO_sequenceItem) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               6                    ***0***         `uvm_object_utils(FIFO_sequenceItem) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /sequenceItem_pkg --

  File objects/sequence_Item/sequenceItem.sv
----------------Focused Condition View-------------------
Line       9 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       9 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      13         2        11    15.38%

================================Statement Details================================

Statement Coverage for instance /sequenceItem_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/sequence_Item/sequenceItem.sv
    1                                                package sequenceItem_pkg;
    2                                                import shared_pkg::*;
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                `include "defines/defines.svh"
    6                                                
    7                                                // Sequence Item class Valid and Invalid
    8                                                class FIFO_sequenceItem extends uvm_sequence_item;
    9               1                    ***0***         `uvm_object_utils(FIFO_sequenceItem) 
    9               2                    ***0***     
    9               3                    ***0***     
    9               4                    ***0***     
    9               5                    ***0***     
    9               6                      41808     
    9               7                    ***0***     
    9               8                    ***0***     
    9               9                    ***0***     
    9              10                    ***0***     
    10                                               // input
    11                                                   rand bit [FIFO_WIDTH-1:0] data_in;
    12                                                   rand bit rst_n, wr_en, rd_en;
    13                                               
    14                                               // output DUT
    15                                                   bit [FIFO_WIDTH-1:0] data_out;
    16                                                   bit wr_ack, overflow;
    17                                                   bit full, empty, almostfull, almostempty, underflow;
    18                                               
    19                                               // output refrence
    20                                                   bit [FIFO_WIDTH-1:0] data_out_ref;
    21                                                   bit wr_ack_ref, overflow_ref;
    22                                                   bit full_ref, empty_ref, almostfull_ref, almostempty_ref, underflow_ref;
    23                                               
    24                                               // new
    25              1                     110418         `Func_new("FIFO_sequenceItem")
    26                                               
    27                                               
    28                                               // my function to print FIFO DUT and REF
    29                                                   function string print_DUT();
    30              1                    ***0***             return $sformatf("DUT:\ndata_out = %0d, wr_ack = %0d, full = %0d, empty = %0d, underflow = %0d, almostempty = %0d, almostfull = %0d, overflow = %0d",
    31                                                       data_out, wr_ack, full, empty, underflow, almostempty, almostfull, overflow
    32                                                       ); 
    33                                                   endfunction
    34                                                   
    35                                                   function string print_REF();
    36              1                    ***0***             return $sformatf("REF:\ndata_out_ref = %0d, wr_ack_ref = %0d, full_ref = %0d, empty_ref = %0d, underflow_ref = %0d, almostempty_ref = %0d, almostfull_ref = %0d, overflow_ref = %0d",


=================================================================================
=== Instance: /random_sequence_pkg
=== Design Unit: work.random_sequence_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /random_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_random_sequence.sv
------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               1                    ***0***         `uvm_object_utils(FIFO_random_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               2                    ***0***         `uvm_object_utils(FIFO_random_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               3                    ***0***         `uvm_object_utils(FIFO_random_sequence) 
    9               4                    ***0***         `uvm_object_utils(FIFO_random_sequence) 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               5                    ***0***         `uvm_object_utils(FIFO_random_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               6                    ***0***         `uvm_object_utils(FIFO_random_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /random_sequence_pkg --

  File objects/FIFO_sequence/FIFO_random_sequence.sv
----------------Focused Condition View-------------------
Line       9 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       9 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      18         9         9    50.00%

================================Statement Details================================

Statement Coverage for instance /random_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_random_sequence.sv
    1                                                package random_sequence_pkg;
    2                                                import shared_pkg::*;
    3                                                import uvm_pkg::*;
    4                                                import sequenceItem_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                `include "defines/defines.svh"
    7                                                 
    8                                                class FIFO_random_sequence extends uvm_sequence #(FIFO_sequenceItem);
    9               1                    ***0***         `uvm_object_utils(FIFO_random_sequence) 
    9               2                    ***0***     
    9               3                    ***0***     
    9               4                    ***0***     
    9               5                    ***0***     
    9               6                          1     
    9               7                    ***0***     
    9               8                    ***0***     
    9               9                    ***0***     
    9              10                    ***0***     
    10                                               
    11              1                          1         `Func_new("FIFO_random_sequence")
    12                                               
    13                                                   FIFO_sequenceItem item;
    14                                                   // Main task
    15                                                   task body();
    16              1                       5000             repeat(BOOM_LOOP) begin
    17              1                       5000                 item = `create_obj(FIFO_sequenceItem, "item")  // Creat seq_item
    18                                                           ////////////////////////////
    19                                                           //  edit constraint mode  //
    20                                                           //    CONSTRAINT RULES    //
    21                                                           ////////////////////////////
    22              1                       5000                 `OFF_ALL
    23              1                       5000                 `ON(CON_RESET)
    24              1                       5000                 `ON(CON_DATA_MAX_ZERO)
    25                                               
    26              1                       5000                 start_item(item);
    27                                                           assert (item.randomize());
    28              1                       5000                 finish_item(item);


=================================================================================
=== Instance: /rst_sequence_pkg
=== Design Unit: work.rst_sequence_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /rst_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_reset_sequence.sv
------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               1                    ***0***         `uvm_object_utils(FIFO_reset_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               2                    ***0***         `uvm_object_utils(FIFO_reset_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               3                    ***0***         `uvm_object_utils(FIFO_reset_sequence) 
    9               4                    ***0***         `uvm_object_utils(FIFO_reset_sequence) 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               5                    ***0***         `uvm_object_utils(FIFO_reset_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               6                    ***0***         `uvm_object_utils(FIFO_reset_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /rst_sequence_pkg --

  File objects/FIFO_sequence/FIFO_reset_sequence.sv
----------------Focused Condition View-------------------
Line       9 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       9 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      20        11         9    55.00%

================================Statement Details================================

Statement Coverage for instance /rst_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_reset_sequence.sv
    1                                                package rst_sequence_pkg;
    2                                                import shared_pkg::*;
    3                                                import sequenceItem_pkg::*;
    4                                                import uvm_pkg::*;
    5                                                `include "defines/defines.svh"
    6                                                `include "uvm_macros.svh"
    7                                                 
    8                                                class FIFO_reset_sequence extends uvm_sequence #(FIFO_sequenceItem);
    9               1                    ***0***         `uvm_object_utils(FIFO_reset_sequence) 
    9               2                    ***0***     
    9               3                    ***0***     
    9               4                    ***0***     
    9               5                    ***0***     
    9               6                          2     
    9               7                    ***0***     
    9               8                    ***0***     
    9               9                    ***0***     
    9              10                    ***0***     
    10                                               
    11              1                          1         `Func_new("FIFO_reset_sequence")
    12                                               
    13                                                   FIFO_sequenceItem item;
    14                                                   // Main task
    15                                                   task body;
    16                                                       // Creat seq_item
    17              1                          2             item = `create_obj(FIFO_sequenceItem, "item")
    18              1                          2             `OFF_ALL
    19              1                         10             repeat(5) begin
    20              1                         10                 start_item(item);
    21              1                         10                 item.data_in = 0;
    22              1                         10                 item.wr_en = 0; item.rd_en = 0;
    22              2                         10     
    23              1                         10                 item.rst_n = 0;
    24              1                         10                 finish_item(item);


=================================================================================
=== Instance: /Async_toggle_sequence_pkg
=== Design Unit: work.Async_toggle_sequence_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /Async_toggle_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_Async_toggle_sequence.sv
------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               1                    ***0***         `uvm_object_utils(FIFO_Async_toggle_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               2                    ***0***         `uvm_object_utils(FIFO_Async_toggle_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               3                    ***0***         `uvm_object_utils(FIFO_Async_toggle_sequence)
    9               4                    ***0***         `uvm_object_utils(FIFO_Async_toggle_sequence)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               5                    ***0***         `uvm_object_utils(FIFO_Async_toggle_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               6                    ***0***         `uvm_object_utils(FIFO_Async_toggle_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /Async_toggle_sequence_pkg --

  File objects/FIFO_sequence/FIFO_Async_toggle_sequence.sv
----------------Focused Condition View-------------------
Line       9 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       9 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      22        13         9    59.09%

================================Statement Details================================

Statement Coverage for instance /Async_toggle_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_Async_toggle_sequence.sv
    1                                                package Async_toggle_sequence_pkg;
    2                                                import shared_pkg::*;
    3                                                import uvm_pkg::*;
    4                                                import sequenceItem_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                `include "defines/defines.svh"
    7                                                   
    8                                                class FIFO_Async_toggle_sequence extends uvm_sequence #(FIFO_sequenceItem);
    9               1                    ***0***         `uvm_object_utils(FIFO_Async_toggle_sequence)
    9               2                    ***0***     
    9               3                    ***0***     
    9               4                    ***0***     
    9               5                    ***0***     
    9               6                          1     
    9               7                    ***0***     
    9               8                    ***0***     
    9               9                    ***0***     
    9              10                    ***0***     
    10                                               
    11              1                          1         `Func_new("FIFO_Async_toggle_sequence")
    12                                               
    13                                                   FIFO_sequenceItem item;
    14                                                   // Main task
    15                                                   task body();
    16              1                          1             for (int i = WR_START_VALUE_OF_TOGGLE; i<GIANT_LOOP; i++) begin
    16              2                       2999     
    17              1                       2999                 item = `create_obj(FIFO_sequenceItem, "item")  // Creat seq_item
    18                                                           ////////////////////////////
    19                                                           //  edit constraint mode  //
    20                                                           //    CONSTRAINT RULES    //
    21                                                           ////////////////////////////
    22              1                       2999                 `OFF_ALL
    23              1                       2999                 `ON(CON_RESET)
    24              1                       2999                 `ON(CON_TOGGLE)
    25              1                       2999                 `ON(CON_DATA_ONE_BIT)
    26                                               
    27              1                       2999                 start_item(item);
    28                                                           assert (item.randomize());
    29              1                       2999                 item.wr_en = i%2;
    30              1                       2999                 item.rd_en = !(i%2);
    31              1                       2999                 finish_item(item);


=================================================================================
=== Instance: /sync_toggle_sequence_pkg
=== Design Unit: work.sync_toggle_sequence_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /sync_toggle_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_sync_toggle_sequence.sv
------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               1                    ***0***         `uvm_object_utils(FIFO_sync_toggle_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               2                    ***0***         `uvm_object_utils(FIFO_sync_toggle_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               3                    ***0***         `uvm_object_utils(FIFO_sync_toggle_sequence) 
    9               4                    ***0***         `uvm_object_utils(FIFO_sync_toggle_sequence) 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               5                    ***0***         `uvm_object_utils(FIFO_sync_toggle_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               6                    ***0***         `uvm_object_utils(FIFO_sync_toggle_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /sync_toggle_sequence_pkg --

  File objects/FIFO_sequence/FIFO_sync_toggle_sequence.sv
----------------Focused Condition View-------------------
Line       9 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       9 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      21        12         9    57.14%

================================Statement Details================================

Statement Coverage for instance /sync_toggle_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_sync_toggle_sequence.sv
    1                                                package sync_toggle_sequence_pkg;
    2                                                import shared_pkg::*;
    3                                                import uvm_pkg::*;
    4                                                import sequenceItem_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                `include "defines/defines.svh"
    7                                                  
    8                                                class FIFO_sync_toggle_sequence extends uvm_sequence #(FIFO_sequenceItem);
    9               1                    ***0***         `uvm_object_utils(FIFO_sync_toggle_sequence) 
    9               2                    ***0***     
    9               3                    ***0***     
    9               4                    ***0***     
    9               5                    ***0***     
    9               6                          1     
    9               7                    ***0***     
    9               8                    ***0***     
    9               9                    ***0***     
    9              10                    ***0***     
    10                                               
    11              1                          1         `Func_new("FIFO_sync_toggle_sequence")
    12                                               
    13                                                   FIFO_sequenceItem item;
    14                                                   // Main task
    15                                                   task body();
    16              1                          1             for (int i = WR_START_VALUE_OF_TOGGLE; i<GIANT_LOOP; i++) begin
    16              2                       2999     
    17              1                       2999                 item = `create_obj(FIFO_sequenceItem, "item")  // Creat seq_item
    18                                                           ////////////////////////////
    19                                                           //  edit constraint mode  //
    20                                                           //    CONSTRAINT RULES    //
    21                                                           ////////////////////////////
    22              1                       2999                 `OFF_ALL
    23              1                       2999                 `ON(CON_RESET)
    24              1                       2999                 `ON(CON_TOGGLE)
    25                                               
    26              1                       2999                 start_item(item);
    27                                                           assert (item.randomize());
    28              1                       2999                 item.wr_en = i%2;
    29              1                       2999                 item.rd_en = i%2;
    30              1                       2999                 finish_item(item);


=================================================================================
=== Instance: /write_read_sequence_pkg
=== Design Unit: work.write_read_sequence_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        12         2        10    16.66%

================================Branch Details================================

Branch Coverage for instance /write_read_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_write_read_sequence.sv
------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               1                    ***0***         `uvm_object_utils(FIFO_write_read_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               2                    ***0***         `uvm_object_utils(FIFO_write_read_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               3                    ***0***         `uvm_object_utils(FIFO_write_read_sequence) 
    9               4                    ***0***         `uvm_object_utils(FIFO_write_read_sequence) 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               5                    ***0***         `uvm_object_utils(FIFO_write_read_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               6                    ***0***         `uvm_object_utils(FIFO_write_read_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    16                                         2     Count coming in to IF
    16              1                          1             if (isFIRST_DIST_FINITH) begin
                                               1     All False Count
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /write_read_sequence_pkg --

  File objects/FIFO_sequence/FIFO_write_read_sequence.sv
----------------Focused Condition View-------------------
Line       9 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       9 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      30        21         9    70.00%

================================Statement Details================================

Statement Coverage for instance /write_read_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_write_read_sequence.sv
    1                                                package write_read_sequence_pkg;
    2                                                import shared_pkg::*;
    3                                                import uvm_pkg::*;
    4                                                import sequenceItem_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                `include "defines/defines.svh"
    7                                                 
    8                                                class FIFO_write_read_sequence extends uvm_sequence #(FIFO_sequenceItem);
    9               1                    ***0***         `uvm_object_utils(FIFO_write_read_sequence) 
    9               2                    ***0***     
    9               3                    ***0***     
    9               4                    ***0***     
    9               5                    ***0***     
    9               6                          2     
    9               7                    ***0***     
    9               8                    ***0***     
    9               9                    ***0***     
    9              10                    ***0***     
    10                                               
    11              1                          1         `Func_new("FIFO_write_read_sequence")
    12                                               
    13                                                   FIFO_sequenceItem item;
    14                                                   // Main task
    15                                                   task body();
    16                                                       if (isFIRST_DIST_FINITH) begin
    17              1                          1                 WR_EN_ON_DIST = 30;
    18              1                          1                 RD_EN_ON_DIST = 70; 
    19                                                       end
    20              1                       1000             repeat(HOBBIT_LOOP) begin
    21              1                       1000                 item = `create_obj(FIFO_sequenceItem,"item")  // Creat seq_item
    22                                                           ////////////////////////////
    23                                                           //  edit constraint mode  //
    24                                                           //    CONSTRAINT RULES    //
    25                                                           ////////////////////////////
    26              1                       1000                 `OFF_ALL
    27              1                       1000                 `ON(CON_RESET)
    28              1                       1000                 `ON(CON_W_R)
    29              1                       1000                 `ON(CON_DATA_ONE_BIT)
    30                                                           assert (item.randomize());
    31                                               
    32              1                      17000                 foreach(item.data_arr[i]) begin
    33              1                      16000                     start_item(item);
    34              1                      16000                     item.data_in = item.data_arr[i];
    35              1                      16000                     finish_item(item);
    36                                                           end
    37                                                       end
    38              1                      10000             repeat(BOOM_LOOP) begin
    39              1                      10000                 item = `create_obj(FIFO_sequenceItem,"item")  // Creat seq_item
    40                                                           ////////////////////////////
    41                                                           //  edit constraint mode  //
    42                                                           //    CONSTRAINT RULES    //
    43                                                           ////////////////////////////
    44              1                      10000                 `OFF_ALL
    45              1                      10000                 `ON(CON_RESET)
    46              1                      10000                 `ON(CON_W_R)
    47              1                      10000                 start_item(item);
    48                                                           assert (item.randomize());
    49              1                      10000                 finish_item(item);


=================================================================================
=== Instance: /read_only_sequence_pkg
=== Design Unit: work.read_only_sequence_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /read_only_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_read_only_sequence.sv
------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               1                    ***0***         `uvm_object_utils(FIFO_read_only_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               2                    ***0***         `uvm_object_utils(FIFO_read_only_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               3                    ***0***         `uvm_object_utils(FIFO_read_only_sequence) 
    9               4                    ***0***         `uvm_object_utils(FIFO_read_only_sequence) 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               5                    ***0***         `uvm_object_utils(FIFO_read_only_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    9                                    ***0***     Count coming in to IF
    9               6                    ***0***         `uvm_object_utils(FIFO_read_only_sequence) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /read_only_sequence_pkg --

  File objects/FIFO_sequence/FIFO_read_only_sequence.sv
----------------Focused Condition View-------------------
Line       9 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       9 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      18         9         9    50.00%

================================Statement Details================================

Statement Coverage for instance /read_only_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_read_only_sequence.sv
    1                                                package read_only_sequence_pkg;
    2                                                import shared_pkg::*;
    3                                                import uvm_pkg::*;
    4                                                import sequenceItem_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                `include "defines/defines.svh"
    7                                                 
    8                                                class FIFO_read_only_sequence extends uvm_sequence #(FIFO_sequenceItem);
    9               1                    ***0***         `uvm_object_utils(FIFO_read_only_sequence) 
    9               2                    ***0***     
    9               3                    ***0***     
    9               4                    ***0***     
    9               5                    ***0***     
    9               6                          3     
    9               7                    ***0***     
    9               8                    ***0***     
    9               9                    ***0***     
    9              10                    ***0***     
    10                                               
    11              1                          1         `Func_new("FIFO_read_only_sequence")
    12                                               
    13                                                   FIFO_sequenceItem item;
    14                                                   // Main task
    15                                                   task body();
    16              1                       2400             repeat(DEPTH_LOOP) begin
    17              1                       2400                 item = `create_obj(FIFO_sequenceItem, "item")  // Creat seq_item
    18                                                           ////////////////////////////
    19                                                           //  edit constraint mode  //
    20                                                           //    CONSTRAINT RULES    //
    21                                                           ////////////////////////////
    22              1                       2400                 `OFF_ALL
    23              1                       2400                 `ON(CON_RESET)
    24              1                       2400                 `ON(CON_R)
    25                                               
    26              1                       2400                 start_item(item);
    27                                                           assert (item.randomize());
    28              1                       2400                 finish_item(item);


=================================================================================
=== Instance: /write_only_sequence_pkg
=== Design Unit: work.write_only_sequence_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /write_only_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_write_only_sequence.sv
------------------------------------IF Branch------------------------------------
    12                                   ***0***     Count coming in to IF
    12              1                    ***0***         `uvm_object_utils(FIFO_write_only_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    12                                   ***0***     Count coming in to IF
    12              2                    ***0***         `uvm_object_utils(FIFO_write_only_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    12                                   ***0***     Count coming in to IF
    12              3                    ***0***         `uvm_object_utils(FIFO_write_only_sequence)
    12              4                    ***0***         `uvm_object_utils(FIFO_write_only_sequence)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    12                                   ***0***     Count coming in to IF
    12              5                    ***0***         `uvm_object_utils(FIFO_write_only_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    12                                   ***0***     Count coming in to IF
    12              6                    ***0***         `uvm_object_utils(FIFO_write_only_sequence)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /write_only_sequence_pkg --

  File objects/FIFO_sequence/FIFO_write_only_sequence.sv
----------------Focused Condition View-------------------
Line       12 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       12 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      18         9         9    50.00%

================================Statement Details================================

Statement Coverage for instance /write_only_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/FIFO_sequence/FIFO_write_only_sequence.sv
    1                                                package write_only_sequence_pkg;
    2                                                import shared_pkg::*;
    3                                                import uvm_pkg::*;
    4                                                import sequenceItem_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                `include "defines/defines.svh"
    7                                                //`define create_item FIFO_sequenceItem::type_id::create("item");
    8                                                //`define OFF_ALL item.constraint_mode(0);
    9                                                //`define ON(constraint) item.constraint.constraint_mode(1);
    10                                               
    11                                               class FIFO_write_only_sequence extends uvm_sequence #(FIFO_sequenceItem);
    12              1                    ***0***         `uvm_object_utils(FIFO_write_only_sequence)
    12              2                    ***0***     
    12              3                    ***0***     
    12              4                    ***0***     
    12              5                    ***0***     
    12              6                          3     
    12              7                    ***0***     
    12              8                    ***0***     
    12              9                    ***0***     
    12             10                    ***0***     
    13                                                   
    14              1                          1         `Func_new("FIFO_write_only_sequence")
    15                                               
    16                                                   FIFO_sequenceItem item;
    17                                                   // Main task
    18                                                   task body();
    19              1                       2400             repeat(DEPTH_LOOP) begin
    20              1                       2400                 item = `create_obj(FIFO_sequenceItem, "item")  // Creat seq_item
    21                                                           ////////////////////////////
    22                                                           //  edit constraint mode  //
    23                                                           //    CONSTRAINT RULES    //
    24                                                           ////////////////////////////
    25              1                       2400                 `OFF_ALL
    26              1                       2400                 `ON(CON_RESET)
    27              1                       2400                 `ON(CON_W)
    28                                               
    29              1                       2400                 start_item(item);
    30                                                           assert (item.randomize());
    31              1                       2400                 finish_item(item);


=================================================================================
=== Instance: /monitor_pkg
=== Design Unit: work.monitor_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /monitor_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/agent/monitor/monitor.sv
------------------------------------IF Branch------------------------------------
    54                                     41808     Count coming in to IF
    54              1                    ***0***             `uvm_info("run_phase_monitor", mon_seq_item.print_DUT(), UVM_FULL)
                                           41808     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      32        28         4    87.50%

================================Statement Details================================

Statement Coverage for instance /monitor_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/agent/monitor/monitor.sv
    1                                                package monitor_pkg;
    2                                                import shared_pkg::*;
    3                                                import sequenceItem_pkg::*;
    4                                                import uvm_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                `include "defines/defines.svh"
    7                                                
    8                                                // monitor
    9                                                class FIFO_monitor extends uvm_monitor;
    10              1                    ***0***         `uvm_component_utils(FIFO_monitor)
    10              2                    ***0***     
    10              3                    ***0***     
    11                                                   virtual FIFO_interface v_if;
    12                                                   FIFO_sequenceItem mon_seq_item;
    13                                                   uvm_analysis_port #(FIFO_sequenceItem) mon_port; // monitor is a port
    14                                               
    15              1                          1         `Func_new_p("FIFO_monitor")
    16                                               
    17                                                   function void build_phase(uvm_phase phase);
    18              1                          1             super.build_phase(phase);
    19              1                          1             mon_port = new("mon_port", this);
    20                                                   endfunction
    21                                               
    22                                                   task run_phase(uvm_phase phase);
    23              1                          1           super.run_phase(phase);
    24              1                          1           forever begin
    25              1                      41809             mon_seq_item = `create_comp(FIFO_sequenceItem, "mon_seq_item")
    26              1                      41809             @(negedge v_if.clk);
    27                                                       // assigned inputs to interface
    28              1                      41808                 mon_seq_item.rst_n   = v_if.rst_n;
    29              1                      41808                 mon_seq_item.wr_en   = v_if.wr_en;
    30              1                      41808                 mon_seq_item.rd_en   = v_if.rd_en;
    31              1                      41808                 mon_seq_item.data_in = v_if.data_in;
    32                                               
    33                                                       // assigned outputs to driver
    34              1                      41808                 mon_seq_item.data_out    = v_if.data_out;
    35              1                      41808                 mon_seq_item.wr_ack      = v_if.wr_ack;
    36              1                      41808                 mon_seq_item.overflow    = v_if.overflow;
    37              1                      41808                 mon_seq_item.full        = v_if.full;
    38              1                      41808                 mon_seq_item.empty       = v_if.empty;
    39              1                      41808                 mon_seq_item.almostfull  = v_if.almostfull;
    40              1                      41808                 mon_seq_item.almostempty = v_if.almostempty;
    41              1                      41808                 mon_seq_item.underflow   = v_if.underflow;
    42                                               
    43                                                       // assigned refrence to driver
    44              1                      41808                 mon_seq_item.data_out_ref    = v_if.data_out_ref;      
    45              1                      41808                 mon_seq_item.wr_ack_ref      = v_if.wr_ack_ref;      
    46              1                      41808                 mon_seq_item.overflow_ref    = v_if.overflow_ref;      
    47              1                      41808                 mon_seq_item.full_ref        = v_if.full_ref;  
    48              1                      41808                 mon_seq_item.empty_ref       = v_if.empty_ref;  
    49              1                      41808                 mon_seq_item.almostfull_ref  = v_if.almostfull_ref;          
    50              1                      41808                 mon_seq_item.almostempty_ref = v_if.almostempty_ref;          
    51              1                      41808                 mon_seq_item.underflow_ref   = v_if.underflow_ref;
    52                                                   
    53              1                      41808             mon_port.write(mon_seq_item); // that's mean that monitor will send the data
    54              1                    ***0***             `uvm_info("run_phase_monitor", mon_seq_item.print_DUT(), UVM_FULL)


=================================================================================
=== Instance: /sequencer_pkg
=== Design Unit: work.sequencer_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         1         3    25.00%

================================Statement Details================================

Statement Coverage for instance /sequencer_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/agent/sequencer/sequencer.sv
    1                                                package sequencer_pkg;
    2                                                import uvm_pkg::*;
    3                                                import sequenceItem_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                `include "defines/defines.svh"
    6                                                
    7                                                // sequencer class
    8                                                class sequencer extends uvm_sequencer #(FIFO_sequenceItem);
    9               1                    ***0***         `uvm_component_utils(sequencer)
    9               2                    ***0***     
    9               3                    ***0***     
    10              1                          1         `Func_new_p("sequencer")


=================================================================================
=== Instance: /driver_pkg
=== Design Unit: work.driver_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /driver_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/agent/driver/driver.sv
------------------------------------IF Branch------------------------------------
    52                                     41808     Count coming in to IF
    52              1                    ***0***                 `uvm_info("run_phase_driver", stim_seq_item.print_DUT(), UVM_FULL)
                                           41808     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      31        27         4    87.09%

================================Statement Details================================

Statement Coverage for instance /driver_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/agent/driver/driver.sv
    2                                                package driver_pkg;
    3                                                import shared_pkg::*;
    4                                                import sequenceItem_pkg::*;
    5                                                import uvm_pkg::*;
    6                                                `include "uvm_macros.svh"
    7                                                `include "defines/defines.svh"
    8                                                `define create_obj(type, name) type::type_id::create(name);
    9                                                
    10                                               // driver class
    11                                               class FIFO_driver extends uvm_driver #(FIFO_sequenceItem);
    12              1                    ***0***         `uvm_component_utils(FIFO_driver)
    12              2                    ***0***     
    12              3                    ***0***     
    13                                                   virtual FIFO_interface v_if;
    14                                                   FIFO_sequenceItem stim_seq_item;
    15                                               
    16              1                          1         `Func_new_p("FIFO_driver")
    17                                               
    18                                                   task run_phase(uvm_phase phase);
    19              1                          1             super.run_phase(phase);
    20              1                          1             forever begin
    21              1                      41809                 stim_seq_item = `create_comp(FIFO_sequenceItem, "stim_seq_item")
    22              1                      41809                 seq_item_port.get_next_item(stim_seq_item);
    23                                                       // assigned inputs to interface
    24              1                      41808                 v_if.rst_n   = stim_seq_item.rst_n;
    25              1                      41808                 v_if.wr_en   = stim_seq_item.wr_en;
    26              1                      41808                 v_if.rd_en   = stim_seq_item.rd_en;
    27              1                      41808                 v_if.data_in = stim_seq_item.data_in;
    28              1                      41808                 @(negedge v_if.clk);
    29                                               
    30                                                       // assigned outputs to driver
    31              1                      41808                 stim_seq_item.data_out    = v_if.data_out;
    32              1                      41808                 stim_seq_item.wr_ack      = v_if.wr_ack;
    33              1                      41808                 stim_seq_item.overflow    = v_if.overflow;
    34              1                      41808                 stim_seq_item.full        = v_if.full;
    35              1                      41808                 stim_seq_item.empty       = v_if.empty;
    36              1                      41808                 stim_seq_item.almostfull  = v_if.almostfull;
    37              1                      41808                 stim_seq_item.almostempty = v_if.almostempty;
    38              1                      41808                 stim_seq_item.underflow   = v_if.underflow;
    39                                               
    40                                                       // assigned refrence to driver
    41              1                      41808                 stim_seq_item.data_out_ref    = v_if.data_out_ref;      
    42              1                      41808                 stim_seq_item.wr_ack_ref      = v_if.wr_ack_ref;      
    43              1                      41808                 stim_seq_item.overflow_ref    = v_if.overflow_ref;      
    44              1                      41808                 stim_seq_item.full_ref        = v_if.full_ref;  
    45              1                      41808                 stim_seq_item.empty_ref       = v_if.empty_ref;  
    46              1                      41808                 stim_seq_item.almostfull_ref  = v_if.almostfull_ref;          
    47              1                      41808                 stim_seq_item.almostempty_ref = v_if.almostempty_ref;          
    48              1                      41808                 stim_seq_item.underflow_ref   = v_if.underflow_ref;
    49                                                       
    50                                                       // valus driven
    51              1                      41808                 seq_item_port.item_done();
    52              1                    ***0***                 `uvm_info("run_phase_driver", stim_seq_item.print_DUT(), UVM_FULL)


=================================================================================
=== Instance: /config_pkg
=== Design Unit: work.config_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /config_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/configration.sv
------------------------------------IF Branch------------------------------------
    10                                   ***0***     Count coming in to IF
    10              1                    ***0***         `uvm_object_utils(FIFO_config)    
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    10                                   ***0***     Count coming in to IF
    10              2                    ***0***         `uvm_object_utils(FIFO_config)    
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    10                                   ***0***     Count coming in to IF
    10              3                    ***0***         `uvm_object_utils(FIFO_config)    
    10              4                    ***0***         `uvm_object_utils(FIFO_config)    
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    10                                   ***0***     Count coming in to IF
    10              5                    ***0***         `uvm_object_utils(FIFO_config)    
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    10                                   ***0***     Count coming in to IF
    10              6                    ***0***         `uvm_object_utils(FIFO_config)    
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /config_pkg --

  File objects/configration.sv
----------------Focused Condition View-------------------
Line       10 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       10 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11         1        10     9.09%

================================Statement Details================================

Statement Coverage for instance /config_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File objects/configration.sv
    2                                                package config_pkg;
    3                                                import shared_pkg::*;
    4                                                import uvm_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                `include "defines/defines.svh"
    7                                                
    8                                                // Configration class
    9                                                class FIFO_config extends uvm_object;
    10              1                    ***0***         `uvm_object_utils(FIFO_config)    
    10              2                    ***0***     
    10              3                    ***0***     
    10              4                    ***0***     
    10              5                    ***0***     
    10              6                    ***0***     
    10              7                    ***0***     
    10              8                    ***0***     
    10              9                    ***0***     
    10             10                    ***0***     
    11                                                   virtual FIFO_interface v_if;
    12              1                          1         `Func_new("FIFO_config")


=================================================================================
=== Instance: /agent_pkg
=== Design Unit: work.agent_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         1         3    25.00%

================================Branch Details================================

Branch Coverage for instance /agent_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/agent/agent.sv
------------------------------------IF Branch------------------------------------
    28                                         1     Count coming in to IF
    28              1                    ***0***             if (!uvm_config_db#(FIFO_config)::get(this, "", "CFG", cfg))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    29                                   ***0***     Count coming in to IF
    29              1                    ***0***                 `uvm_fatal("build_phase", "DRIVER - Unable to get config");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        10         4    71.42%

================================Statement Details================================

Statement Coverage for instance /agent_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/agent/agent.sv
    2                                                package agent_pkg;
    3                                                import shared_pkg::*;
    4                                                import config_pkg::*;
    5                                                import driver_pkg::*;
    6                                                import sequencer_pkg::*;
    7                                                import sequenceItem_pkg::*;
    8                                                import monitor_pkg::*;
    9                                                import uvm_pkg::*;
    10                                               `include "uvm_macros.svh"
    11                                               `include "defines/defines.svh"
    12                                               //`define create_obj(type, name) type::type_id::create(name, this);
    13                                               
    14                                               // agent class
    15                                               class FIFO_agent extends uvm_agent;
    16              1                    ***0***         `uvm_component_utils(FIFO_agent)
    16              2                    ***0***     
    16              3                    ***0***     
    17                                                   sequencer sqr; // mange data transfer
    18                                                   FIFO_driver drv; // inside agent 
    19                                                   FIFO_monitor mon; // inside agent 
    20                                                   FIFO_config cfg; // get the data of interface
    21                                                   uvm_analysis_port #(FIFO_sequenceItem) agt_port; // agent is a port
    22                                               
    23              1                          1         `Func_new_p("FIFO_agent")
    24                                                
    25                                                   function void build_phase(uvm_phase phase);
    26              1                          1             super.build_phase(phase);
    27                                               
    28                                                       if (!uvm_config_db#(FIFO_config)::get(this, "", "CFG", cfg))
    29              1                    ***0***                 `uvm_fatal("build_phase", "DRIVER - Unable to get config");
    30                                               
    31              1                          1             sqr = `create_comp(sequencer, "sqr")
    32              1                          1             drv = `create_comp(FIFO_driver, "drv")
    33              1                          1             mon = `create_comp(FIFO_monitor, "mon")
    34              1                          1             agt_port = new("agt_port", this);
    35                                                   endfunction
    36                                               
    37                                                   function void connect_phase(uvm_phase phase);
    38              1                          1             drv.v_if = cfg.v_if;
    39              1                          1             mon.v_if = cfg.v_if;
    40              1                          1             drv.seq_item_port.connect(sqr.seq_item_export);
    41              1                          1             mon.mon_port.connect(agt_port);


=================================================================================
=== Instance: /coverage_collector_pkg
=== Design Unit: work.coverage_collector_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        11         3    78.57%

================================Statement Details================================

Statement Coverage for instance /coverage_collector_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/coverage_collector/coverage_collector.sv
    1                                                package coverage_collector_pkg;
    2                                                import agent_pkg::*;
    3                                                import shared_pkg::*;
    4                                                import sequencer_pkg::*;
    5                                                import sequenceItem_pkg::*;
    6                                                import uvm_pkg::*;
    7                                                `include "uvm_macros.svh"
    8                                                `include "defines/defines.svh"
    9                                                
    10                                               class FIFO_coverage extends uvm_component;
    11              1                    ***0***         `uvm_component_utils(FIFO_coverage)
    11              2                    ***0***     
    11              3                    ***0***     
    12                                               
    13                                                   uvm_analysis_export #(FIFO_sequenceItem) cov_export; // coverage export
    14                                                   uvm_tlm_analysis_fifo #(FIFO_sequenceItem) cov_fifo; // coverage fifo
    15                                                   FIFO_sequenceItem cov_seq_item;
    16                                               
    17                                               //////////////////////////////////
    18                                               //      begin Coverage Group    //
    19                                               //////////////////////////////////
    20                                               
    21                                               covergroup CVG;
    22                                                   // rst_n coverage
    23                                                       rst_cp: coverpoint cov_seq_item.rst_n{
    24                                                               bins active = {0};
    25                                                               bins inactive = {1};
    26                                                               bins inactive_to_active = (1 => 0);
    27                                                               bins active_to_inactive = (0 => 1);
    28                                                       }
    29                                               
    30                                                   // write and read enable signal coverpoint
    31                                                       wr_en_cp:        coverpoint cov_seq_item.wr_en{
    32                                                           bins active = {1};
    33                                                           bins inactive = {0};
    34                                                       }
    35                                                       rd_en_cp:        coverpoint cov_seq_item.rd_en{
    36                                                           bins active = {1};
    37                                                           bins inactive = {0};
    38                                                       }
    39                                               
    40                                                   // data_out bus coverpoint    
    41                                                       data_out_cp:     coverpoint cov_seq_item.data_out{
    42                                                           bins one_bit_H[] = one_bit_high;
    43                                                           bins zero = {ZERO};
    44                                                           bins max = {MAX};
    45                                                           bins others = default;
    46                                                       }
    47                                               
    48                                                   // outputs signals coverpoint    
    49                                                       wr_ack_cp:       coverpoint cov_seq_item.wr_ack{
    50                                                           bins active = {1};
    51                                                           bins inactive = {0};
    52                                                           bins inactive_to_active = (0 => 1);
    53                                                           bins active_to_inactive = (1 => 0);
    54                                                       }
    55                                                       full_cp:         coverpoint cov_seq_item.full{
    56                                                           bins active = {1};
    57                                                           bins inactive = {0};
    58                                                           bins active_to_inactive = (1 => 0);
    59                                                           bins inactive_to_active = (0 => 1);
    60                                                       }
    61                                                       empty_cp:        coverpoint cov_seq_item.empty{
    62                                                           bins active = {1};
    63                                                           bins inactive = {0};
    64                                                           bins active_to_inactive = (1 => 0);
    65                                                           bins inactive_to_active = (0 => 1);
    66                                                       }
    67                                                       almostfull_cp:   coverpoint cov_seq_item.almostfull{
    68                                                           bins active = {1};
    69                                                           bins inactive = {0};
    70                                                           bins active_to_inactive = (1 => 0);
    71                                                           bins inactive_to_active = (0 => 1);
    72                                                       }
    73                                                       almostempty_cp:  coverpoint cov_seq_item.almostempty{
    74                                                           bins active = {1};
    75                                                           bins inactive = {0};
    76                                                           bins active_to_inactive = (1 => 0);
    77                                                           bins inactive_to_active = (0 => 1);
    78                                                       }
    79                                                       underflow_cp:    coverpoint cov_seq_item.underflow{
    80                                                           bins active = {1};
    81                                                           bins inactive = {0};
    82                                                       }
    83                                                       overflow_cp:     coverpoint cov_seq_item.overflow{
    84                                                           bins active = {1};
    85                                                           bins inactive = {0};
    86                                                       }
    87                                               
    88                                                   // Cross coverage
    89                                                   // A -> refear to Active
    90                                                   // I -> refear to Inactive
    91                                               
    92                                                   // wr_ack signal 
    93                                                       // reset
    94                                                       ack_rst_cross: cross rst_cp, wr_ack_cp {
    95                                                           bins rst_active_ack_inactive = binsof(rst_cp.active) && binsof(wr_ack_cp.inactive);
    96                                                           option.cross_auto_bin_max = 0;
    97                                                       }
    98                                               
    99                                                       // wr_en and rd_en ** requirement **
    100                                                      ack_wr_rd_cross: cross wr_ack_cp, wr_en_cp, rd_en_cp{
    101                                                          bins activate_ack_wr_inactive = binsof(wr_en_cp.inactive) && binsof(wr_ack_cp.active_to_inactive);
    102                                                          bins deactivate_ack_wr_active = binsof(wr_en_cp.active) && binsof(wr_ack_cp.inactive_to_active);
    103                                                          bins ack_inactive_wr_inactive = binsof(wr_en_cp.inactive) && binsof(wr_ack_cp.inactive);
    104                                              
    105                                                          bins deactivate_ack_rd_active = binsof(rd_en_cp.active) && binsof(wr_ack_cp.active_to_inactive);
    106                                                          bins deactivate_ack_wr_active_rd_active = binsof(rd_en_cp.active)&&  binsof(wr_en_cp.active) && binsof(wr_ack_cp.active_to_inactive);
    107                                                          option.cross_auto_bin_max = 0;
    108                                                      }
    109                                              
    110                                                      // full and wr_en
    111                                                      // crossing wr_ack with full when wr_ack is active and full is active
    112                                                      // crossing wr_ack with full when full rose and wr_ack fell
    113                                                      ack_full_wr_cross: cross wr_ack_cp, wr_en_cp, full_cp{
    114                                                          bins ack_active_wr_active_full_inactive = binsof(wr_ack_cp.active)
    115                                                                                  && binsof(wr_en_cp.active)
    116                                                                                  && binsof(full_cp.inactive);
    117                                                          bins ack_active_full_inactive = binsof(wr_ack_cp.active) && binsof(full_cp.inactive);
    118                                                          bins activated_full_activated_ack = binsof(wr_ack_cp.inactive_to_active) && binsof(full_cp.inactive_to_active);
    119                                                          option.cross_auto_bin_max = 0;
    120                                                      }
    121                                              
    122                                                      // empty
    123                                                      ack_empty_cross: cross empty_cp, wr_ack_cp {
    124                                                          bins deactivated_empty_wr_active = binsof(wr_ack_cp.active) && binsof(empty_cp.active_to_inactive);
    125                                                          option.cross_auto_bin_max = 0;
    126                                                      }
    127                                              
    128                                                      // almostempty
    129                                                      ack_almostempty_cross: cross almostempty_cp, wr_ack_cp {
    130                                                          bins ack_active_almostempty_inactive = binsof(wr_ack_cp.active) && binsof(almostempty_cp.inactive);
    131                                                          option.cross_auto_bin_max = 0;
    132                                                      }
    133                                              
    134                                                  // full signal
    135                                                      // rst transaction
    136                                                      rst_full_cross: cross full_cp, rst_cp{
    137                                                          bins deactivate_full_activate_rst = binsof(full_cp.active_to_inactive) && binsof(rst_cp.inactive_to_active);
    138                                                          option.cross_auto_bin_max = 0;
    139                                                      }
    140                                                      // wr_en and rd_en ** requirement **
    141                                                      full_cross: cross full_cp, wr_en_cp, rd_en_cp{
    142                                                          bins activate_full_wr_active = binsof(full_cp.inactive_to_active) && binsof(wr_en_cp.active);
    143                                                          bins full_active_wr_active = binsof(full_cp.active) && binsof(wr_en_cp.active);
    144                                                          bins deactivate_full_rd_active = binsof(full_cp.active_to_inactive) && binsof(rd_en_cp.active);
    145                                                          option.cross_auto_bin_max = 0;
    146                                                      }
    147                                              
    148                                                      // almostfull transaction
    149                                                      // crossing to detect when almostfull trans from active to inactive and full from inactive to active  
    150                                                      // and oppesite operation  
    151                                                      almostfull_full_cross: cross almostfull_cp, full_cp{
    152                                                          bins trans_almostfull_to_full = binsof(almostfull_cp.active_to_inactive) && binsof(full_cp.inactive_to_active);
    153                                                          bins trans_full_to_almostfull = binsof(almostfull_cp.inactive_to_active) && binsof(full_cp.active_to_inactive);
    154                                                          option.cross_auto_bin_max = 0;
    155                                                      }
    156                                              
    157                                                      // overflow
    158                                                      // crossing to detect when overflow and full both active 
    159                                                      full_overflow_cross:   cross overflow_cp, full_cp{
    160                                                          bins overflow_full_both_active = binsof(overflow_cp.active) && binsof(full_cp.active);
    161                                                          option.cross_auto_bin_max = 0;
    162                                                      }
    163                                              
    164                                                  // empty signal
    165                                                      // rst 
    166                                                      rst_empty_cross: cross empty_cp, rst_cp {
    167                                                          option.cross_auto_bin_max = 0;
    168                                                          bins rst_empty = binsof(empty_cp.inactive) && binsof(rst_cp.active);
    169                                                          bins deactivate_rst_activate_empty = binsof(rst_cp.active_to_inactive) && binsof(empty_cp.inactive_to_active);
    170                                                      }
    171                                              
    172                                                      // almostempty trans
    173                                                      // crossing to detect when almostempty trans from active to inactive and empty from inactive to active  
    174                                                      // and oppesite operation 
    175                                                      almostempty_empty_cross: cross almostempty_cp, empty_cp{
    176                                                          bins trans_almostempty_to_empty = binsof(almostempty_cp.active_to_inactive) && binsof(empty_cp.inactive_to_active);
    177                                                          bins trans_empty_to_almostempty = binsof(almostempty_cp.inactive_to_active) && binsof(empty_cp.active_to_inactive);
    178                                                          option.cross_auto_bin_max = 0;
    179                                                      }
    180                                                      
    181                                                      // rd_en and wr_en
    182                                                      empty_cross: cross empty_cp, wr_en_cp, rd_en_cp{
    183                                                          bins activate_empty_rd_active = binsof(empty_cp.inactive_to_active) && binsof(rd_en_cp.active);
    184                                                          bins empty_active_rd_active = binsof(empty_cp.active) && binsof(rd_en_cp.active);
    185                                                          bins deactivate_empty_wr_active = binsof(empty_cp.active_to_inactive) && binsof(wr_en_cp.active);
    186                                                          option.cross_auto_bin_max = 0;
    187                                                      }
    188                                              
    189                                                      // underflow
    190                                                      // crossing to detect when underflow and empty both active  
    191                                                      empty_underflow_cross: cross underflow_cp, empty_cp{
    192                                                          bins underflow_empty = binsof(underflow_cp.active) && binsof(empty_cp.active);
    193                                                          option.cross_auto_bin_max = 0;
    194                                                      }
    195                                              
    196                                                  // overflow signal
    197                                                      // rst
    198                                                      rst_overflow_cross: cross rst_cp, overflow_cp {
    199                                                          bins rst_active_ack_inactive = binsof(rst_cp.active) && binsof(overflow_cp.inactive);
    200                                                          option.cross_auto_bin_max = 0;
    201                                                      }
    202                                              
    203                                                      // wr_en
    204                                                      // crossing to detect when overflow and write enabe both active  
    205                                                      wr_overflow_cross: cross wr_en_cp, overflow_cp{
    206                                                          bins both_high = binsof(wr_en_cp.active) && binsof(overflow_cp.active);
    207                                                          bins overflow_high = binsof(wr_en_cp.active) && binsof(overflow_cp.inactive);
    208                                                          option.cross_auto_bin_max = 0;
    209                                                      }
    210                                              
    211                                                  // underflow signal
    212                                                      // rst
    213                                                      rst_underflow_cross: cross rst_cp, underflow_cp {
    214                                                          bins rst_ack = binsof(rst_cp.active) && binsof(underflow_cp.inactive);
    215                                                          option.cross_auto_bin_max = 0;
    216                                                      }
    217                                              
    218                                                      // rd_en
    219                                                      // crossing to detect when underflow and read enabe both active 
    220                                                      rd_underflow_cross: cross rd_en_cp, underflow_cp{
    221                                                          bins both_high = binsof(rd_en_cp.active) && binsof(underflow_cp.active);
    222                                                          bins rd_high = binsof(rd_en_cp.active) && binsof(underflow_cp.inactive);
    223                                                          option.cross_auto_bin_max = 0;
    224                                                      }
    225                                              
    226                                                  // almostempty signal
    227                                                      // rst
    228                                                      rst_almostempty_cross: cross rst_cp, almostempty_cp{
    229                                                          bins rst_almostempty = binsof(rst_cp.active) && binsof(almostempty_cp.inactive);
    230                                                          option.cross_auto_bin_max = 0;
    231                                                      }
    232                                              
    233                                                      // rd_en and wr_en
    234                                                      almostempty_cross:  cross wr_en_cp, rd_en_cp, almostempty_cp{
    235                                                          bins write_almost_active = binsof(wr_en_cp.active) && binsof(almostempty_cp.active);
    236                                                          bins write_Active_almost_inactive = binsof(wr_en_cp.active) && binsof(almostempty_cp.inactive);
    237                                                          bins almost_read_active = binsof(rd_en_cp.active) && binsof(almostempty_cp.active);
    238                                                          bins read_active_almost_inactive = binsof(rd_en_cp.active) && binsof(almostempty_cp.inactive);
    239                                                          bins activate_almost_write_active = binsof(wr_en_cp.active) && binsof(almostempty_cp.inactive_to_active);
    240                                                          bins activate_almost_read_active = binsof(rd_en_cp.active) && binsof(almostempty_cp.inactive_to_active);
    241                                                          option.cross_auto_bin_max = 0;
    242                                                      }
    243                                              
    244                                                  // almostfull signal
    245                                                      // rst
    246                                                      rst_almostfull_cross: cross rst_cp, almostfull_cp{
    247                                                          bins rst_almostfull = binsof(rst_cp.active) && binsof(almostfull_cp.inactive);
    248                                                          option.cross_auto_bin_max = 0;
    249                                                      }
    250                                              
    251                                                      // wr_en and rd_en
    252                                                      almostfull_cross:   cross wr_en_cp, rd_en_cp, almostfull_cp{
    253                                                          bins wr_active_almost_active = binsof(wr_en_cp.active) && binsof(almostfull_cp.active);
    254                                                          bins wr_active_almost_inactive = binsof(wr_en_cp.active) && binsof(almostfull_cp.inactive);
    255                                                          bins rd_active_almost_active = binsof(rd_en_cp.active) && binsof(almostfull_cp.active);
    256                                                          bins rd_active_almost_inactive = binsof(rd_en_cp.active) && binsof(almostfull_cp.inactive);
    257                                                          option.cross_auto_bin_max = 0;
    258                                                      }
    259                                              
    260                                                  // data_out bus
    261                                                      // reset
    262                                                      rst_data_out_cross: cross rst_cp, data_out_cp {
    263                                                          bins rst_data = binsof(rst_cp.active) && binsof(data_out_cp.zero);
    264                                                          option.cross_auto_bin_max = 0;
    265                                                      }
    266                                              
    267                                                      // rd_en and wr_en ** requirement **
    268                                                      data_out_cross: cross data_out_cp, wr_en_cp, rd_en_cp;
    269                                              
    270                                                  // Crossing onley read and write
    271                                                  rd_wr_cross: cross rd_en_cp, wr_en_cp;
    272                                              endgroup
    273                                              
    274                                              ///////////////////////////////////
    275                                              //      finish Coverage Group    //
    276                                              ///////////////////////////////////
    277                                              
    278                                              // Methods
    279                                                  function new(string name = "FIFO_coverage", uvm_component parent = null);
    280             1                          1             super.new(name, parent);
    281             1                          1             CVG = new();
    282                                                  endfunction //new()
    283                                              
    284                                                  function void build_phase(uvm_phase phase);
    285             1                          1             super.build_phase(phase);
    286             1                          1             cov_export = new("cov_export", this);
    287             1                          1             cov_fifo = new("cov_fifo", this);
    288                                                  endfunction
    289                                              
    290                                                  function void connect_phase(uvm_phase phase);
    291             1                          1             super.connect_phase(phase);
    292             1                          1             cov_export.connect(cov_fifo.analysis_export);
    293                                                  endfunction
    294                                              
    295                                                  task run_phase(uvm_phase phase);
    296             1                          1             super.run_phase(phase);
    297             1                          1             forever begin
    298             1                      41809                 cov_fifo.get(cov_seq_item);
    299             1                      41808                 CVG.sample();


=================================================================================
=== Instance: /scoreboard_pkg
=== Design Unit: work.scoreboard_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         8         3         5    37.50%

================================Branch Details================================

Branch Coverage for instance /scoreboard_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/scoreboard/scoreboard.sv
------------------------------------IF Branch------------------------------------
    43                                     41808     Count coming in to IF
    43              1                    ***0***             if (
    55              1                      41808             end else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    54                                   ***0***     Count coming in to IF
    54              1                    ***0***                 `uvm_error("scoreboard",$sformatf("%0s\n%0s,",chk_item.print_DUT(), chk_item.print_REF()))
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    62                                         1     Count coming in to IF
    62              1                          1             `uvm_info("report_phase", $sformatf("Total correct transaction: %0d", correct_counter), UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    63                                         1     Count coming in to IF
    63              1                          1             `uvm_info("report_phase", $sformatf("Total faild transaction: %0d", error_counter), UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         0         8     0.00%

================================Condition Details================================

Condition Coverage for instance /scoreboard_pkg --

  File UVM_top/Test/env/scoreboard/scoreboard.sv
----------------Focused Condition View-------------------
Line       44 Item    1  ((chk_item.data_out != chk_item.data_out_ref) || (chk_item.wr_ack != chk_item.wr_ack_ref) || (chk_item.full != chk_item.full_ref) || (chk_item.empty != chk_item.empty_ref) || (chk_item.underflow != chk_item.underflow_ref) || (chk_item.almostempty != chk_item.almostempty_ref) || (chk_item.almostfull != chk_item.almostfull_ref) || (chk_item.overflow != chk_item.overflow_ref))
Condition totals: 0 of 8 input terms covered = 0.00%

                                          Input Term   Covered  Reason for no coverage   Hint
                                         -----------  --------  -----------------------  --------------
        (chk_item.data_out != chk_item.data_out_ref)         N  '_1' not hit             Hit '_1'
            (chk_item.wr_ack != chk_item.wr_ack_ref)         N  '_1' not hit             Hit '_1'
                (chk_item.full != chk_item.full_ref)         N  '_1' not hit             Hit '_1'
              (chk_item.empty != chk_item.empty_ref)         N  '_1' not hit             Hit '_1'
      (chk_item.underflow != chk_item.underflow_ref)         N  '_1' not hit             Hit '_1'
  (chk_item.almostempty != chk_item.almostempty_ref)         N  '_1' not hit             Hit '_1'
    (chk_item.almostfull != chk_item.almostfull_ref)         N  '_1' not hit             Hit '_1'
        (chk_item.overflow != chk_item.overflow_ref)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                                            Non-masking condition(s)      
 ---------  ---------  --------------------                                  -------------------------     
  Row   1:          1  (chk_item.data_out != chk_item.data_out_ref)_0        ~((chk_item.wr_ack != chk_item.wr_ack_ref) || ((chk_item.full != chk_item.full_ref) || ((chk_item.empty != chk_item.empty_ref) || ((chk_item.underflow != chk_item.underflow_ref) || ((chk_item.almostempty != chk_item.almostempty_ref) || ((chk_item.almostfull != chk_item.almostfull_ref) || (chk_item.overflow != chk_item.overflow_ref)))))))
  Row   2:    ***0***  (chk_item.data_out != chk_item.data_out_ref)_1        -                             
  Row   3:          1  (chk_item.wr_ack != chk_item.wr_ack_ref)_0            (~(chk_item.data_out != chk_item.data_out_ref) && ~((chk_item.full != chk_item.full_ref) || ((chk_item.empty != chk_item.empty_ref) || ((chk_item.underflow != chk_item.underflow_ref) || ((chk_item.almostempty != chk_item.almostempty_ref) || ((chk_item.almostfull != chk_item.almostfull_ref) || (chk_item.overflow != chk_item.overflow_ref)))))))
  Row   4:    ***0***  (chk_item.wr_ack != chk_item.wr_ack_ref)_1            ~(chk_item.data_out != chk_item.data_out_ref)
  Row   5:          1  (chk_item.full != chk_item.full_ref)_0                (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~((chk_item.empty != chk_item.empty_ref) || ((chk_item.underflow != chk_item.underflow_ref) || ((chk_item.almostempty != chk_item.almostempty_ref) || ((chk_item.almostfull != chk_item.almostfull_ref) || (chk_item.overflow != chk_item.overflow_ref))))))
  Row   6:    ***0***  (chk_item.full != chk_item.full_ref)_1                (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref))
  Row   7:          1  (chk_item.empty != chk_item.empty_ref)_0              (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~(chk_item.full != chk_item.full_ref) && ~((chk_item.underflow != chk_item.underflow_ref) || ((chk_item.almostempty != chk_item.almostempty_ref) || ((chk_item.almostfull != chk_item.almostfull_ref) || (chk_item.overflow != chk_item.overflow_ref)))))
  Row   8:    ***0***  (chk_item.empty != chk_item.empty_ref)_1              (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~(chk_item.full != chk_item.full_ref))
  Row   9:          1  (chk_item.underflow != chk_item.underflow_ref)_0      (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~(chk_item.full != chk_item.full_ref) && ~(chk_item.empty != chk_item.empty_ref) && ~((chk_item.almostempty != chk_item.almostempty_ref) || ((chk_item.almostfull != chk_item.almostfull_ref) || (chk_item.overflow != chk_item.overflow_ref))))
 Row   10:    ***0***  (chk_item.underflow != chk_item.underflow_ref)_1      (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~(chk_item.full != chk_item.full_ref) && ~(chk_item.empty != chk_item.empty_ref))
 Row   11:          1  (chk_item.almostempty != chk_item.almostempty_ref)_0  (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~(chk_item.full != chk_item.full_ref) && ~(chk_item.empty != chk_item.empty_ref) && ~(chk_item.underflow != chk_item.underflow_ref) && ~((chk_item.almostfull != chk_item.almostfull_ref) || (chk_item.overflow != chk_item.overflow_ref)))
 Row   12:    ***0***  (chk_item.almostempty != chk_item.almostempty_ref)_1  (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~(chk_item.full != chk_item.full_ref) && ~(chk_item.empty != chk_item.empty_ref) && ~(chk_item.underflow != chk_item.underflow_ref))
 Row   13:          1  (chk_item.almostfull != chk_item.almostfull_ref)_0    (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~(chk_item.full != chk_item.full_ref) && ~(chk_item.empty != chk_item.empty_ref) && ~(chk_item.underflow != chk_item.underflow_ref) && ~(chk_item.almostempty != chk_item.almostempty_ref) && ~(chk_item.overflow != chk_item.overflow_ref))
 Row   14:    ***0***  (chk_item.almostfull != chk_item.almostfull_ref)_1    (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~(chk_item.full != chk_item.full_ref) && ~(chk_item.empty != chk_item.empty_ref) && ~(chk_item.underflow != chk_item.underflow_ref) && ~(chk_item.almostempty != chk_item.almostempty_ref))
 Row   15:          1  (chk_item.overflow != chk_item.overflow_ref)_0        (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~(chk_item.full != chk_item.full_ref) && ~(chk_item.empty != chk_item.empty_ref) && ~(chk_item.underflow != chk_item.underflow_ref) && ~(chk_item.almostempty != chk_item.almostempty_ref) && ~(chk_item.almostfull != chk_item.almostfull_ref))
 Row   16:    ***0***  (chk_item.overflow != chk_item.overflow_ref)_1        (~(chk_item.data_out != chk_item.data_out_ref) && ~(chk_item.wr_ack != chk_item.wr_ack_ref) && ~(chk_item.full != chk_item.full_ref) && ~(chk_item.empty != chk_item.empty_ref) && ~(chk_item.underflow != chk_item.underflow_ref) && ~(chk_item.almostempty != chk_item.almostempty_ref) && ~(chk_item.almostfull != chk_item.almostfull_ref))


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      21        16         5    76.19%

================================Statement Details================================

Statement Coverage for instance /scoreboard_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/scoreboard/scoreboard.sv
    1                                                package scoreboard_pkg;
    2                                                import agent_pkg::*;
    3                                                import shared_pkg::*;
    4                                                import sequenceItem_pkg::*;
    5                                                import uvm_pkg::*;
    6                                                `include "uvm_macros.svh"
    7                                                `include "defines/defines.svh"
    8                                                
    9                                                class FIFO_scoreboard extends uvm_scoreboard;
    10              1                    ***0***         `uvm_component_utils(FIFO_scoreboard)
    10              2                    ***0***     
    10              3                    ***0***     
    11                                                   uvm_analysis_export #(FIFO_sequenceItem) sb_export; // scoreboard export
    12                                                   uvm_tlm_analysis_fifo #(FIFO_sequenceItem) sb_fifo; // scoreboard fifo
    13                                                   FIFO_sequenceItem sb_seq_item;
    14                                                   
    15                                                   // error and correct counter
    16              1                          1         int correct_counter = 0;
    17              1                          1         int error_counter = 0;
    18                                               
    19              1                          1         `Func_new_p("FIFO_scoreboard")
    20                                               
    21                                                   function void build_phase(uvm_phase phase);
    22              1                          1             super.build_phase(phase);
    23              1                          1             sb_export = new("sb_export", this);
    24              1                          1             sb_fifo = new("sb_fifo", this);
    25                                                   endfunction
    26                                               
    27                                                   function void connect_phase(uvm_phase phase);
    28              1                          1             super.connect_phase(phase);
    29              1                          1             sb_export.connect(sb_fifo.analysis_export);
    30                                                   endfunction
    31                                               
    32                                                   task run_phase(uvm_phase phase);
    33              1                          1             super.run_phase(phase);
    34                                                       
    35              1                          1             forever begin
    36              1                      41809                 sb_fifo.get(sb_seq_item);
    37                                                           //// Checking //////
    38              1                      41808                 Checking_task(sb_seq_item);
    39                                                       end
    40                                                   endtask
    41                                               
    42                                                   task Checking_task(FIFO_sequenceItem chk_item);
    43                                                       if (
    44                                                           chk_item.data_out!=chk_item.data_out_ref
    45                                                           || chk_item.wr_ack!=chk_item.wr_ack_ref
    46                                                           || chk_item.full!=chk_item.full_ref
    47                                                           || chk_item.empty!=chk_item.empty_ref
    48                                                           || chk_item.underflow!=chk_item.underflow_ref
    49                                                           || chk_item.almostempty!=chk_item.almostempty_ref
    50                                                           || chk_item.almostfull!=chk_item.almostfull_ref
    51                                                           || chk_item.overflow!=chk_item.overflow_ref
    52                                                       ) begin
    53              1                    ***0***                 error_counter++;
    54              1                    ***0***                 `uvm_error("scoreboard",$sformatf("%0s\n%0s,",chk_item.print_DUT(), chk_item.print_REF()))
    55                                                       end else begin
    56              1                      41808                 correct_counter++;
    57                                                       end
    58                                                   endtask //Checking_task
    59                                               
    60                                                   function void report_phase(uvm_phase phase);
    61              1                          1             super.report_phase(phase);
    62              1                          1             `uvm_info("report_phase", $sformatf("Total correct transaction: %0d", correct_counter), UVM_LOW)
    63              1                          1             `uvm_info("report_phase", $sformatf("Total faild transaction: %0d", error_counter), UVM_LOW)


=================================================================================
=== Instance: /env_pkg
=== Design Unit: work.env_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      10         7         3    70.00%

================================Statement Details================================

Statement Coverage for instance /env_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/env/env.sv
    2                                                package env_pkg;
    3                                                import shared_pkg::*;
    4                                                import scoreboard_pkg::*;
    5                                                import coverage_collector_pkg::*;
    6                                                import agent_pkg::*;
    7                                                import uvm_pkg::*;
    8                                                `include "defines/defines.svh"
    9                                                `include "uvm_macros.svh"
    10                                               //`define create_obj(type, name) type::type_id::create(name, this);
    11                                               
    12                                               // Environment class
    13                                               class FIFO_env extends uvm_env;
    14              1                    ***0***         `uvm_component_utils(FIFO_env)
    14              2                    ***0***     
    14              3                    ***0***     
    15                                               
    16                                                   FIFO_scoreboard sb;
    17                                                   FIFO_coverage cov;
    18                                                   FIFO_agent agt;
    19                                               
    20                                                   // declare new() function of parent uvm_env
    21              1                          1         `Func_new_p("FIFO_env")
    22                                               
    23                                                   // build phase function and send the parameter phase to parent uvm_env
    24                                                   function void build_phase(uvm_phase phase);
    25              1                          1             super.build_phase(phase);
    26                                                       // create scoreboard, coverage and agent
    27                                                       // if we have more than one I should change name (first parameter)
    28              1                          1             agt = `create_comp(FIFO_agent, "agt")
    29              1                          1             sb = `create_comp(FIFO_scoreboard, "sb")
    30              1                          1             cov = `create_comp(FIFO_coverage, "cov")
    31                                                   endfunction
    32                                               
    33                                                   function void connect_phase(uvm_phase phase);     
    34              1                          1             agt.agt_port.connect(sb.sb_export);
    35              1                          1             agt.agt_port.connect(cov.cov_export);  


=================================================================================
=== Instance: /test_pkg
=== Design Unit: work.test_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        32        15        17    46.87%

================================Branch Details================================

Branch Coverage for instance /test_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/test.sv
------------------------------------IF Branch------------------------------------
    52                                         1     Count coming in to IF
    52              1                    ***0***                  if (!uvm_config_db#(virtual FIFO_interface)::get(this, "", "INTERFACE", cfg.v_if))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    53                                   ***0***     Count coming in to IF
    53              1                    ***0***                         `uvm_fatal("build_phase", "TEST - Unable to get config");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    64                                         1     Count coming in to IF
    64              1                    ***0***                 #1; `uvm_info("run_phase", "Inside the slaby test DEBUG", UVM_DEBUG) 
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    70                                         1     Count coming in to IF
    70              1                          1                 `uvm_info("run_phase", "FIFO reset seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    75                                         1     Count coming in to IF
    75              1                          1                 `uvm_info("run_phase", "FIFO write only seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    78                                         1     Count coming in to IF
    78              1                          1                 `uvm_info("run_phase", "FIFO read only seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    81                                         1     Count coming in to IF
    81              1                          1                 `uvm_info("run_phase", "FIFO write and read seq - WRITE DIST MORE THAN READ -", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    85                                         1     Count coming in to IF
    85              1                          1                 `uvm_info("run_phase", "FIFO sync toggle seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    88                                         1     Count coming in to IF
    88              1                          1                 `uvm_info("run_phase", "FIFO read only seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    91                                         1     Count coming in to IF
    91              1                          1                 `uvm_info("run_phase", "FIFO write only seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    94                                         1     Count coming in to IF
    94              1                          1                 `uvm_info("run_phase", "FIFO async toggle seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    97                                         1     Count coming in to IF
    97              1                          1                 `uvm_info("run_phase", "FIFO read only seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    100                                        1     Count coming in to IF
    100             1                          1                 `uvm_info("run_phase", "FIFO write only seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    104                                        1     Count coming in to IF
    104             1                          1                 `uvm_info("run_phase", "FIFO write and read seq - READ DIST MORE THAN WRITE -", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    107                                        1     Count coming in to IF
    107             1                          1                 `uvm_info("run_phase", "FIFO reset seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    110                                        1     Count coming in to IF
    110             1                          1                 `uvm_info("run_phase", "FIFO random seq", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      52        48         4    92.30%

================================Statement Details================================

Statement Coverage for instance /test_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File UVM_top/Test/test.sv
    1                                                package test_pkg;
    2                                                import shared_pkg::*;
    3                                                import env_pkg::*;
    4                                                import config_pkg::*;
    5                                                
    6                                                import write_only_sequence_pkg::*;
    7                                                import read_only_sequence_pkg::*;
    8                                                import write_read_sequence_pkg::*;
    9                                                import sync_toggle_sequence_pkg::*;
    10                                               import Async_toggle_sequence_pkg::*;
    11                                               import rst_sequence_pkg::*;
    12                                               import random_sequence_pkg::*;
    13                                               
    14                                               import sequenceItem_pkg::*;
    15                                               import uvm_pkg::*;
    16                                               `include "defines/defines.svh"
    17                                               `include "uvm_macros.svh"
    18                                               
    19                                               class FIFO_test extends uvm_test;
    20              1                    ***0***         `uvm_component_utils(FIFO_test)
    20              2                    ***0***     
    20              3                          1     
    21                                                   FIFO_env env;
    22                                                   FIFO_config cfg;
    23                                               
    24                                                   FIFO_reset_sequence reset_seq;
    25                                                   FIFO_write_only_sequence write_seq;
    26                                                   FIFO_read_only_sequence  read_seq;
    27                                                   FIFO_write_read_sequence both_seq;
    28                                                   FIFO_sync_toggle_sequence s_toggle_seq;
    29                                                   FIFO_Async_toggle_sequence as_toggle_seq;
    30                                                   FIFO_random_sequence random_seq;
    31                                                   
    32                                                   // declare new() function of parent uvm_test
    33              1                          1         `Func_new_p("FIFO_test")
    34                                               
    35                                                   // build phase function and send the parameter phase to parent uvm_test
    36                                                       function void build_phase(uvm_phase phase);
    37              1                          1                 uvm_factory factory = uvm_factory::get(); 
    38              1                          1                 super.build_phase(phase);
    39                                                           //set_type_override_by_type(FIFO_sequenceItem::get_type(), FIFO_sequenceItem_valid::get_type());
    40              1                          1                 factory.print();
    41              1                          1                 env  = `create_comp(FIFO_env, "env")
    42              1                          1                 cfg  = `create_comp(FIFO_config, "cfg")
    43                                                           // sequences
    44              1                          1                 reset_seq     = `create_comp(FIFO_reset_sequence, "reset_seq")
    45              1                          1                 write_seq     = `create_comp(FIFO_write_only_sequence, "write_seq")
    46              1                          1                 read_seq      = `create_comp(FIFO_read_only_sequence, "read_seq")
    47              1                          1                 both_seq      = `create_comp(FIFO_write_read_sequence, "both_seq")
    48              1                          1                 s_toggle_seq  = `create_comp(FIFO_sync_toggle_sequence, "s_toggle_seq")
    49              1                          1                 as_toggle_seq = `create_comp(FIFO_Async_toggle_sequence, "as_toggle_seq")
    50              1                          1                 random_seq    = `create_comp(FIFO_random_sequence, "random_seq")
    51                                               
    52                                                            if (!uvm_config_db#(virtual FIFO_interface)::get(this, "", "INTERFACE", cfg.v_if))
    53              1                    ***0***                         `uvm_fatal("build_phase", "TEST - Unable to get config");
    54                                               
    55              1                          1                 uvm_config_db#(FIFO_config)::set(this, "*", "CFG", cfg);
    56                                                       endfunction
    57                                               
    58                                                   // run phase function to create UVM env
    59                                                       task run_phase(uvm_phase phase);
    60              1                          1                 super.run_phase(phase);
    61                                                           
    62                                                           // raise and drop to start and finish of FIFO_test
    63              1                          1                 phase.raise_objection(this);
    64              1                          1                 #1; `uvm_info("run_phase", "Inside the slaby test DEBUG", UVM_DEBUG) 
    64              2                    ***0***     
    65                                               
    66                                                           //////////////////////////
    67                                                           //    stimulus start    //
    68                                                           //////////////////////////
    69                                                           // rst seq
    70              1                          1                 `uvm_info("run_phase", "FIFO reset seq", UVM_LOW)
    71              1                          1                 reset_seq.start(env.agt.sqr);
    72                                               
    73                                                           // LOCK RESET 
    74              1                          1                 RESET_ACTIVE = 0;
    75              1                          1                 `uvm_info("run_phase", "FIFO write only seq", UVM_LOW)
    76              1                          1                 write_seq.start(env.agt.sqr);
    77                                               
    78              1                          1                 `uvm_info("run_phase", "FIFO read only seq", UVM_LOW)
    79              1                          1                 read_seq.start(env.agt.sqr);
    80                                                           
    81              1                          1                 `uvm_info("run_phase", "FIFO write and read seq - WRITE DIST MORE THAN READ -", UVM_LOW)
    82              1                          1                 both_seq.start(env.agt.sqr);
    83              1                          1                 isFIRST_DIST_FINITH = 1;
    84                                                           
    85              1                          1                 `uvm_info("run_phase", "FIFO sync toggle seq", UVM_LOW)
    86              1                          1                 s_toggle_seq.start(env.agt.sqr);
    87                                                           
    88              1                          1                 `uvm_info("run_phase", "FIFO read only seq", UVM_LOW)
    89              1                          1                 read_seq.start(env.agt.sqr);
    90                                               
    91              1                          1                 `uvm_info("run_phase", "FIFO write only seq", UVM_LOW)
    92              1                          1                 write_seq.start(env.agt.sqr);
    93                                               
    94              1                          1                 `uvm_info("run_phase", "FIFO async toggle seq", UVM_LOW)
    95              1                          1                 as_toggle_seq.start(env.agt.sqr);
    96                                               
    97              1                          1                 `uvm_info("run_phase", "FIFO read only seq", UVM_LOW)
    98              1                          1                 read_seq.start(env.agt.sqr);
    99                                                           
    100             1                          1                 `uvm_info("run_phase", "FIFO write only seq", UVM_LOW)
    101             1                          1                 write_seq.start(env.agt.sqr);
    102                                                          // UNLOCK RESET
    103             1                          1                 RESET_ACTIVE = 3;
    104             1                          1                 `uvm_info("run_phase", "FIFO write and read seq - READ DIST MORE THAN WRITE -", UVM_LOW)
    105             1                          1                 both_seq.start(env.agt.sqr);
    106                                              
    107             1                          1                 `uvm_info("run_phase", "FIFO reset seq", UVM_LOW)
    108             1                          1                 reset_seq.start(env.agt.sqr);
    109                                              
    110             1                          1                 `uvm_info("run_phase", "FIFO random seq", UVM_LOW)
    111             1                          1                 random_seq.start(env.agt.sqr);
    112                                                          ///////////////////////////
    113                                                          //    stimulus finish    //
    114                                                          ///////////////////////////
    115                                              
    116             1                          1                 phase.drop_objection(this);



DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_wr_akc_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(69)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_overflow_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(70)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_underflow_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(71)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_data_out_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(72)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_full_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(75)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_almostfull_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(76)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_empty_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(77)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/rst_n_cover/cover_almostempty_rst 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(78)
                                                                               312 Covered   
/top/DUT/FIFO_sva_inst/full_from_almost_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(84)
                                                                              2558 Covered   
/top/DUT/FIFO_sva_inst/full_noChange_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(85)
                                                                              6787 Covered   
/top/DUT/FIFO_sva_inst/full_inactive_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(86)
                                                                              2556 Covered   
/top/DUT/FIFO_sva_inst/ack_active_cover  FIFO_sva Verilog  SVA  DUT/assertion.sv(89)
                                                                              12431 Covered   
/top/DUT/FIFO_sva_inst/ack_inactive_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(90)
                                                                              8393 Covered   
/top/DUT/FIFO_sva_inst/almostfull_from_full_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(93)
                                                                              2556 Covered   
/top/DUT/FIFO_sva_inst/almostfull_noChange_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(94)
                                                                              6787 Covered   
/top/DUT/FIFO_sva_inst/almostfull_inactive_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(95)
                                                                               288 Covered   
/top/DUT/FIFO_sva_inst/overflow_active_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(98)
                                                                              8393 Covered   
/top/DUT/FIFO_sva_inst/overflow_wr_in_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(99)
                                                                               818 Covered   
/top/DUT/FIFO_sva_inst/overflow_Nfull_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(100)
                                                                               942 Covered   
/top/DUT/FIFO_sva_inst/almostempty_noChange_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(103)
                                                                              6787 Covered   
/top/DUT/FIFO_sva_inst/almostempty_from_empty_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(104)
                                                                              1391 Covered   
/top/DUT/FIFO_sva_inst/almostempty_inactive_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(105)
                                                                               526 Covered   
/top/DUT/FIFO_sva_inst/empty_noChaneg_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(108)
                                                                              6787 Covered   
/top/DUT/FIFO_sva_inst/empty_from_almost_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(109)
                                                                              1216 Covered   
/top/DUT/FIFO_sva_inst/empty_inactive_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(110)
                                                                              1391 Covered   
/top/DUT/FIFO_sva_inst/underflow_active_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(113)
                                                                              9033 Covered   
/top/DUT/FIFO_sva_inst/underflow_Nempty_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(114)
                                                                              1133 Covered   
/top/DUT/FIFO_sva_inst/underflow_Nrd_cover 
                                         FIFO_sva Verilog  SVA  DUT/assertion.sv(115)
                                                                               939 Covered   

TOTAL DIRECTIVE COVERAGE: 100.00%  COVERS: 28

Total Coverage By Instance (filtered view): 74.13%

